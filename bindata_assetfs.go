// Code generated by go-bindata.
// sources:
// assets/index.html
// assets/main.css
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x57\xff\x6f\xdb\xb6\x12\xff\xd9\xf9\x2b\xf8\xf4\x0a\x58\x41\x1d\xc9\x76\x5f\xfa\xf0\xe4\x2f\xc0\x6b\xbb\x2e\x1d\xd6\x34\x40\x3a\x0c\x43\x51\x14\xb4\x74\xb6\x98\x48\xa2\x47\x52\x71\x8c\xcc\xff\xfb\xee\x48\xc9\xa6\xe2\x64\xe8\xa6\x02\x8d\xc4\xbb\xfb\xdc\xf7\xe3\x79\x9a\x9b\xb2\x98\x9f\x4c\x73\xe0\xd9\xfc\xa4\x37\xd5\xa9\x12\x6b\xc3\xb4\x4a\x67\x41\x6e\xcc\x3a\x89\xe3\x54\x66\x10\xdd\xfc\x5e\x83\xda\x46\xa9\x2c\x63\xf7\x7a\x36\x8a\xfe\x17\x8d\xa2\x1b\x1d\xcc\xa7\xb1\x93\x7a\x46\xbe\x94\x25\x54\xe6\x46\x5b\xe1\x4c\x6e\xaa\x42\xf2\x4c\x37\xc7\xdf\x03\x60\x0d\xc8\xc5\x2a\x4f\x73\xae\x8c\xc3\xf1\x3e\xff\x21\x42\x29\xb3\xba\x00\x1d\xc3\xfd\x5a\x2a\x23\xaa\xd5\x11\x50\x21\xaa\x5b\xa6\xa0\x98\x05\xda\x6c\x91\x35\x07\x30\x01\x33\xdb\x35\xcc\x02\x03\xf7\x26\x4e\xb5\x0e\x58\xae\x60\x39\x0b\x62\x6d\xb8\x11\x69\x5c\x72\x51\x45\x74\x8e\x31\x8d\x5d\x50\xa7\x0b\x99\x6d\xe7\x27\x0c\x9f\xd6\x36\x0f\xe3\x86\xdf\x71\x77\x1a\x38\x1e\x7a\xee\xb8\x62\x5a\xa6\xb7\x6c\xc6\xaa\xba\x28\x26\x1d\xc2\x46\xd7\x4a\x20\x25\xd8\x68\x74\x6d\x34\xfe\x6f\x34\xc4\x7f\xa3\xe4\xf5\x78\x3c\x8e\x37\x3a\x98\x9c\x9c\xf4\x7a\xc4\x28\xd7\x46\xc8\x4a\x23\xeb\x03\x9e\xf4\xac\xef\x89\x7b\xef\x91\x05\x09\xeb\xeb\x35\x3a\x09\xfd\x81\x3d\x4b\x65\x55\x41\x6a\x2e\x51\xa3\x4e\x98\x51\x35\xb8\x73\xb8\xc3\x44\xe9\x56\xb2\x47\xe9\x4b\xd8\xb2\xae\x52\x82\x67\xe1\x69\x4b\xe8\xf9\x66\xc3\x86\xfd\x0a\x8b\x6b\xfc\x02\x13\x5a\x93\x4f\x27\x3e\x1b\x14\x4b\x64\x33\xb9\xd0\xd6\x5e\x7a\x48\x34\x92\x95\x5c\x43\x85\xa4\x56\x01\xe1\x33\x34\x4d\xcb\x02\xa2\x42\xae\xc2\xa0\xb1\x13\x32\x66\x24\x0b\xd8\x4b\xd6\xc0\xb3\x5d\x17\x28\x2d\xa4\x06\x1f\x09\x9e\x83\x22\x3f\x2c\x77\xc6\x42\x02\x84\x88\x2a\x06\x5f\x82\xd3\xe0\x18\xb7\x04\xad\xf9\xea\x08\xb9\x61\xea\x95\x7a\x85\xa4\x9f\xae\x3f\x5d\x46\x6b\xae\x34\x84\x10\x65\xdc\xf0\xd3\xbd\x9f\x3d\xb1\x64\x21\x72\x45\x94\x04\x36\x9b\xcd\x30\x0f\x58\x3d\xb5\xee\x7b\x28\xbd\x4c\xa6\xb5\xed\x90\x15\x98\x1f\x0a\xa0\xd7\x37\xdb\x0f\x59\xb8\xe7\x8d\x04\xda\xae\x2e\x3e\x7f\xfc\x19\xd5\x11\x9c\x23\x4c\xf6\x08\xad\x1a\x77\x6e\x15\x05\xef\x45\x25\xb0\x90\xb3\xc0\x57\xf5\xbc\x2e\x6c\x94\x52\x98\x6f\x8b\x02\x3d\x47\x8d\xb6\x0f\xa2\x3b\xa1\xc5\x42\x14\xc2\x6c\xa9\x0a\x73\x91\x65\x50\x05\x07\xb5\x3b\x06\x05\xc6\xdd\x87\xe7\x86\xa2\xe5\x3a\xde\x9a\xe4\x70\x29\x2e\x70\x1a\x2d\xa5\x2a\xb9\x09\xfb\xbf\xe1\x73\xf6\xf1\xe3\xd9\xbb\x77\xec\xe2\x22\x29\xcb\x44\xa3\x97\x93\xef\xb6\xf2\x51\x44\xac\xd2\x97\xac\xcf\xc2\x3e\xfe\xf1\x94\xea\x7a\x71\x83\x39\x27\xda\x29\x91\xfa\xd3\x85\x62\xf1\xdc\xbe\x5e\x70\x9d\x63\x5b\x74\x05\x72\x3c\xf4\xdc\xdb\xbf\x36\x8e\x1e\x67\x53\x81\xae\x0b\xd3\xc9\xa6\x3b\x6a\x12\xe5\x3e\x0e\x90\x2f\x22\xe0\x69\x1e\xba\xe3\x48\x83\x19\x1c\x2a\xeb\x16\xb6\x03\x6c\xfb\xa2\x86\x4e\xc6\xa8\x87\x16\x50\xa5\x39\x42\x5a\xea\x97\xe1\xd7\xc9\x73\x11\x6f\x80\xff\x4e\xd0\x0f\x50\xc2\x40\xd9\x8e\x90\xe6\xa9\x78\x89\xc3\x83\x70\x06\xde\xe9\x36\x71\x16\x45\x97\xfa\x0a\xd4\xa7\xb5\x47\xdb\xf9\x80\xae\xfd\x95\x00\x9a\x4c\x34\x07\x28\x9f\x61\x23\x8a\xc8\x7e\xca\x29\xb6\x8e\x97\x5a\x37\x8e\x5b\x41\x5e\x28\x9c\xad\x5b\x06\xf7\x42\x1b\xed\x19\xe1\xe8\x11\xcf\xb2\x2b\x29\xd0\x75\xb2\x7e\xe0\x66\x19\x5b\x72\x4c\x97\x8f\xde\x56\x2a\x01\xdb\x89\xe5\xa4\x3b\x70\x68\x1e\x82\x5d\x5b\x42\xe8\x07\x81\x62\xcc\x13\xf6\x85\x34\x7c\xf5\xe3\xd0\x13\xd9\x3e\x12\xe8\x4e\x87\xe4\x22\xf7\x34\x71\xd7\x31\xed\xc4\x3f\xde\x7f\xa0\xa1\x97\x72\x33\x60\xa8\x54\x51\x8a\xe5\x1d\x28\x76\x5b\xe1\xa5\xda\xd8\x3e\x60\xbc\xca\x98\xa8\xf0\xcb\xd8\xbb\x43\xfb\xb2\x18\x4e\x5b\x2c\x18\x40\x05\xac\x14\x5a\xd3\xbd\xf7\xb8\x0e\xad\xd3\x2d\xdc\xbe\x10\x45\x95\xc1\xfd\xc0\xa9\xe9\x94\xe2\x52\xd6\xa8\x72\xe6\xc2\xeb\xb9\xb0\x47\x43\x01\x3b\x01\x7d\xb0\xec\xde\x3a\x51\x76\x90\x6c\xba\xe9\x34\xa2\x38\x61\x2f\xd9\x1a\xeb\xb2\xec\xd5\x51\x4e\x27\x3e\x41\x81\xa9\x55\x75\x64\x86\x17\xca\x6e\x88\x49\xd9\xbf\x2c\x5a\x57\x83\x33\x78\x5f\x41\x0f\xc7\xf9\x7b\x5c\xf9\x54\xfa\x14\xeb\x4e\x36\xbb\x55\xd7\xe9\x85\x27\xcc\x69\x8d\x6c\xfe\xee\x1c\x94\xfb\xe3\xfe\x37\xc2\x14\xa8\xfb\x81\xd1\xda\x80\x33\xea\xe1\x81\x45\x57\xb7\x2b\xaa\x22\xb6\xdb\xb9\x9a\x2a\xb9\xba\xed\x33\xc7\x8f\x63\xee\xb1\x48\x8a\x4d\x43\xd7\xe6\x46\x98\x9c\xad\xa4\x15\xa9\x45\x2b\x70\xff\x7f\x6c\xa6\xf6\x96\xc7\x62\xd9\x00\x26\x1b\x43\xed\xc6\x86\x66\x4b\x25\x4b\x56\x20\x80\x36\x74\xf1\x2e\x85\xd2\x38\xa8\xb4\xc4\x15\x09\xab\x50\xc3\x89\x4b\x82\x7d\xcf\xfc\xfd\x21\x45\x99\x95\xa4\x72\xc2\x76\xf9\xea\xb9\xb4\xf5\x35\x3e\x36\xf6\xb3\x28\xa1\x35\xad\x57\xf0\x05\x14\x87\x15\xc4\x0d\x2f\xec\x81\xa7\xf7\x90\xa6\x12\x68\xb9\x88\x6c\xbd\xd3\x68\xaf\x74\xbf\x89\xb6\x8b\xf1\xce\x0b\xad\x94\x85\x11\xeb\x16\x3e\x55\x52\xeb\x9c\xa3\x7f\xbe\x17\x78\xa2\x5a\xbf\x0e\xa2\x98\x05\xac\xa3\xc8\xcd\x07\xca\x03\xa5\xa5\xf9\xfa\x83\xdd\x68\x59\x7d\xd3\x06\xb7\xbb\x35\x86\xdd\x51\x29\xa4\x3b\x52\xee\x86\xe2\x06\xfb\x4a\x6e\x70\xab\xa0\xb5\xea\xd1\xda\x43\x0a\x68\x5a\xda\xcd\x0d\x69\x2f\xc2\xfe\xbf\x71\x63\x31\xb8\x63\x82\xc2\xeb\xee\xb0\xd1\x86\xcd\xae\x67\x0b\xca\x02\xfb\x8b\x6c\x3e\x9a\xff\x28\xd9\x9b\xb6\x42\xd8\x2f\x1f\x70\x37\x1d\x11\x25\x13\x77\xcc\x5e\xea\xb3\x60\x89\x06\x60\xdc\x15\x62\xd2\x2a\xda\x43\xb1\xf1\x1c\xed\x2d\x70\x1b\x8b\xde\x36\x35\x80\x2e\x34\xe5\x80\x08\x63\xc7\xf5\x8a\xb8\x6c\x49\x15\x1c\x4b\xa3\xe5\xdd\xed\x28\x14\xef\x30\xf7\xd1\x7b\x9b\x2e\x16\x8c\x87\xc3\xd7\x67\xc3\xd1\xd9\x70\x1c\x30\x4b\x76\xb1\x60\x67\xac\x45\xb0\x43\xe6\xa0\x6e\xc4\xbe\x1f\x05\x0d\x7a\x45\x2e\xc5\xe8\xd3\xd3\xae\x15\xb0\xec\x78\xe6\xb5\x8f\xef\xcd\x15\x37\xb8\x03\x34\x74\xfa\xf8\x6b\x70\x2a\xd7\x33\x5e\x88\x55\x95\xb0\x14\x6f\x5b\x50\x7b\x1d\xd7\x76\xf1\x4a\x70\xed\x5f\xf3\x8a\x89\x8c\x7e\x48\xd0\x49\x60\xb5\x3b\xaa\x05\x27\xfa\xbc\xb5\xa1\x29\xa9\xb7\xb5\x52\x08\xe7\x42\xe1\x2a\x66\x9a\x9f\x5b\x14\x7f\x2b\x0b\xe6\x0d\x63\x93\x18\x5f\x9b\x3b\x71\xda\x3a\x70\xcf\x05\x94\x8d\xce\x93\xe1\x7f\x92\xe1\x39\x45\x96\x85\xc7\x72\xd7\xcd\xee\xb4\xdb\x9d\xba\xad\xc9\x2d\x4c\xc7\x8c\x74\xde\x71\xed\xbc\x71\xad\x2d\xff\x4e\x28\x9d\xb1\x4d\x61\xd3\x8f\x30\x4b\x9b\xc6\xee\x97\x13\x4a\xdb\x1f\xa9\x7f\x06\x00\x00\xff\xff\xb8\xc5\xec\x1e\xac\x0e\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 3756, mode: os.FileMode(420), modTime: time.Unix(1445213944, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _assetsMainCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\xd1\xb1\x4e\xc3\x30\x10\x06\xe0\x99\x3c\xc5\xa9\x0c\x59\x6c\xc9\x76\x5b\x09\xb9\x13\x1b\x13\x0c\x3c\x81\x09\x97\xe4\x24\xd7\xae\x6c\x03\x2d\x88\x77\xc7\x4d\x68\x25\xcb\x1d\x18\x8a\x32\x44\xfa\x7d\x77\xfa\x74\xf7\xe2\x5f\x0f\xf0\xd5\xdc\xf4\xde\x25\xde\x9b\x2d\xd9\x83\x86\xc5\x03\xda\x77\x4c\xd4\x19\x78\xc4\x37\x5c\x30\x38\x07\x0c\xee\x03\x19\xcb\x20\x1a\x17\x79\xc4\x40\xfd\xa6\xf9\x6e\x9a\x51\x56\x53\xda\x72\x4a\xcb\xa0\x7d\xda\xa1\x83\xe7\xdc\xd9\x96\x03\xe6\xc6\x48\x9f\xa8\x61\x2d\x76\xfb\x53\xf2\x81\x34\x8c\x49\xc3\x52\x88\x1c\x59\x72\xc8\xc7\x53\xa4\xa6\xb2\xad\x09\x03\x39\x0d\x2a\x77\x81\x98\x7e\x39\x4d\xb8\x4f\xdc\x58\x1a\xf2\x4b\x87\x2e\x61\x98\x91\xea\x88\xec\xbc\xf5\x41\xc3\xad\x94\x72\x73\x1d\xb2\xba\xab\xc9\xaa\x26\xab\x92\x2c\xf2\x27\x27\xef\x91\xb6\xfc\x27\xda\x85\x6d\xca\x0b\x34\x51\xd1\xd4\x99\xb6\xbe\xd6\x69\xe5\xea\x4f\xa7\xfd\x2d\x2b\xf6\xb4\x9a\x31\x3f\x01\x00\x00\xff\xff\x60\xf7\x80\x34\xaf\x02\x00\x00")

func assetsMainCssBytes() ([]byte, error) {
	return bindataRead(
		_assetsMainCss,
		"assets/main.css",
	)
}

func assetsMainCss() (*asset, error) {
	bytes, err := assetsMainCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/main.css", size: 687, mode: os.FileMode(420), modTime: time.Unix(1445108440, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/index.html": assetsIndexHtml,
	"assets/main.css": assetsMainCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{assetsIndexHtml, map[string]*bintree{
		}},
		"main.css": &bintree{assetsMainCss, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, Prefix: k}
	}
	panic("unreachable")
}
