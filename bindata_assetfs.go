// Code generated by go-bindata.
// sources:
// assets/index.html
// assets/main.css
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x57\x7b\x6f\xdb\x46\x12\xff\x5b\xfe\x14\x7b\xbc\x00\xa2\x11\x99\x94\x94\x73\x0e\x47\x3d\x80\x4b\xd2\xd4\x29\x1a\xc7\x80\x53\x14\x45\x10\x04\x2b\x72\x24\xae\x4d\x72\xd5\xdd\xa5\x65\xc1\xd5\x77\xef\xcc\x2e\x29\x2d\x2d\xbb\x48\xcb\x00\x31\x39\x8f\xdf\x3c\x77\x76\x34\xcd\x4d\x59\xcc\x4f\xa6\x39\xf0\x6c\x7e\xd2\x9b\xea\x54\x89\xb5\x61\x5a\xa5\xb3\x20\x37\x66\x9d\xc4\x71\x2a\x33\x88\x6e\x7e\xaf\x41\x6d\xa3\x54\x96\xb1\x7b\x3d\x1b\x45\xff\x8b\x46\xd1\x8d\x0e\xe6\xd3\xd8\x69\x3d\xa3\x5f\xca\x12\x2a\x73\xa3\xad\x72\x26\x37\x55\x21\x79\xa6\x1b\xf2\xf7\x00\x58\x07\x72\xb1\xca\xd3\x9c\x2b\xe3\x70\xbc\xcf\x7f\x88\x50\xca\xac\x2e\x40\xc7\x70\xbf\x96\xca\x88\x6a\x75\x04\x54\x88\xea\x96\x29\x28\x66\x81\x36\x5b\x14\xcd\x01\x4c\xc0\xcc\x76\x0d\xb3\xc0\xc0\xbd\x89\x53\xad\x03\x96\x2b\x58\xce\x82\x58\x1b\x6e\x44\x1a\x97\x5c\x54\x11\xd1\x31\xa7\xb1\x4b\xea\x74\x21\xb3\xed\xfc\x84\xe1\xd3\xfa\xe6\x61\xdc\xf0\x3b\xee\xa8\x81\x93\xa1\xe7\x8e\x2b\xa6\x65\x7a\xcb\x66\xac\xaa\x8b\x62\xd2\x61\x6c\x74\xad\x04\x72\x82\x8d\xc6\xd0\x46\xe3\xff\x46\x43\xfc\x37\x4a\x5e\x8f\xc7\xe3\x78\xa3\x83\xc9\xc9\x49\xaf\x47\x82\x72\x6d\x84\xac\x34\x8a\x3e\x20\xa5\x67\x63\x4f\xdc\x7b\x8f\x3c\x48\x58\x5f\xaf\x31\x48\xe8\x0f\x2c\x2d\x95\x55\x05\xa9\xb9\x44\x8b\x3a\x61\x46\xd5\xe0\xe8\x70\x87\x85\xd2\xad\x66\x8f\xca\x97\xb0\x65\x5d\xa5\x04\xcf\xc2\xd3\x96\xd1\xf3\xdd\x86\x0d\xfb\x15\x16\xd7\xf8\x05\x26\xb4\x2e\x9f\x4e\x7c\x31\x28\x96\x28\x66\x72\xa1\xad\xbf\xf4\x90\x6a\x24\x2b\xb9\x86\x0a\x59\xad\x01\xc2\x67\xe8\x9a\x96\x05\x44\x85\x5c\x85\x41\xe3\x27\x64\xcc\x48\x16\xb0\x97\xac\x81\x67\xbb\x2e\x50\x5a\x48\x0d\x3e\x12\x3c\x07\x45\x71\x58\xe9\x8c\x85\x04\x08\x11\x75\x0c\xbe\x04\xa7\xc1\x31\x6e\x09\x5a\xf3\xd5\x11\x72\x23\xd4\x2b\xf5\x0a\x59\x3f\x5d\x7f\xba\x8c\xd6\x5c\x69\x08\x21\xca\xb8\xe1\xa7\xfb\x38\x7b\x62\xc9\x42\x94\x8a\xa8\x08\x6c\x36\x9b\x61\x1d\xb0\x7b\x6a\xdd\xf7\x50\x7a\x99\x4c\x6b\x7b\x42\x56\x60\x7e\x28\x80\x5e\xdf\x6c\x3f\x64\xe1\x5e\x36\x12\xe8\xbb\xba\xf8\xfc\xf1\x67\x34\x47\x70\x8e\x31\xd9\x23\xb4\x66\x1c\xdd\x1a\x0a\xde\x8b\x4a\x60\x23\x67\x81\x6f\xea\x79\x5b\x78\x50\x4a\x61\xbe\x2d\x0a\x8c\x1c\x2d\xda\x73\x10\xdd\x09\x2d\x16\xa2\x10\x66\x4b\x5d\x98\x8b\x2c\x83\x2a\x38\x98\xdd\x31\x28\x30\xef\x3e\x3c\x37\x94\x2d\x77\xe2\xad\x4b\x0e\x97\xf2\x02\xa7\xd1\x52\xaa\x92\x9b\xb0\xff\x1b\x3e\x67\x1f\x3f\x9e\xbd\x7b\xc7\x2e\x2e\x92\xb2\x4c\x34\x46\x39\xf9\x6e\x2f\x1f\x65\xc4\x1a\x7d\xc9\xfa\x2c\xec\xe3\x1f\xcf\xa8\xae\x17\x37\x58\x73\xe2\x9d\x12\xab\x3f\x5d\x28\x16\xcf\xed\xeb\x05\xd7\x39\x1e\x8b\xae\x42\x8e\x44\x2f\xbc\xfd\x6b\x13\xe8\x71\x35\x15\xe8\xba\x30\x9d\x6a\x3a\x52\x53\x28\xf7\x71\x80\x7c\x11\x01\x4f\xf3\xd0\x91\x23\x0d\x66\x70\xe8\xac\x5b\xd8\x0e\xf0\xd8\x17\x35\x74\x2a\x46\x67\x68\x01\x55\x9a\x23\xa4\xe5\x7e\x19\x7e\x9d\x3c\x97\xf1\x06\xf8\xef\x24\xfd\x00\x25\x0c\x94\xed\x08\x69\x9e\x8a\x97\x38\x3c\x08\x67\xe0\x51\xb7\x89\xf3\x28\xba\xd4\x57\xa0\x3e\xad\x3d\xde\xce\x07\x74\xc7\x5f\x09\xa0\xc9\x44\x73\x80\xea\x19\x36\xaa\x88\xec\x97\x9c\x72\xeb\x64\xe9\xe8\xc6\x71\xab\xc8\x0b\x85\xb3\x75\xcb\xe0\x5e\x68\xa3\x3d\x27\x1c\x3f\xe2\x59\x76\x25\x05\x86\x4e\xde\x0f\xdc\x2c\x63\x4b\x8e\xe5\xf2\xd1\xdb\x4e\x25\x60\x3b\xb1\x9c\x76\x07\x0e\xdd\x43\xb0\x6b\xcb\x08\xfd\x24\x50\x8e\x79\xc2\xbe\x90\x85\xaf\x7e\x1e\x7a\x22\xdb\x67\x02\xc3\xe9\xb0\x5c\xe6\x9e\x66\xee\x3a\xae\x9d\xf8\xe4\xfd\x07\x3a\x7a\x29\x37\x03\x86\x46\x15\x95\x58\xde\x81\x62\xb7\x15\x5e\xaa\x8d\xef\x03\xc6\xab\x8c\x89\x0a\xbf\x8c\xbd\x3b\xb4\xaf\x8b\xe9\xb4\xcd\x82\x09\x54\xc0\x4a\xa1\x35\xdd\x7b\x8f\xfb\xd0\x06\xdd\xc2\xed\x1b\x51\x54\x19\xdc\x0f\x9c\x99\x4e\x2b\x2e\x65\x8d\x26\x67\x2e\xbd\x5e\x08\x7b\x34\x54\xb0\x13\xd0\x07\xcb\xee\x6d\x10\x65\x07\xc9\x96\x9b\xa8\x11\xe5\x09\xcf\x92\xed\xb1\xae\xc8\xde\x1c\xd5\x74\xe2\x33\x14\x98\x5a\x55\x47\x6e\x78\xa9\xec\xa6\x98\x8c\xfd\xcb\xa2\x75\x2d\x38\x87\xf7\x1d\xf4\x70\x5c\xbf\xc7\x9d\x4f\xad\x4f\xb9\xee\x54\xb3\xdb\x75\x9d\xb3\xf0\x84\x3b\xad\x93\xcd\xdf\x9d\x83\x72\x7f\xdc\xff\x46\x98\x02\x6d\x3f\x30\x5a\x1b\x70\x46\xbd\xa1\x26\x2a\xb9\xba\x65\x57\x4a\xae\xf0\x88\xeb\x3e\x73\x92\x38\xe0\x1e\x0b\xa7\x78\x5c\xe8\xc2\xdc\x08\x93\xb3\x95\xb4\x0d\x58\x8b\x56\xe1\xfe\xff\x78\x8c\xda\xfb\x1d\xdb\x64\x03\x58\x66\x4c\xb2\x1b\x18\x9a\x2d\x95\x2c\x59\x81\x00\xda\xd0\x95\xbb\x14\x4a\xe3\x88\xd2\x12\x97\x23\xec\x3f\x0d\x27\x2e\xfd\xf6\x3d\xf3\x37\x87\x14\x75\x56\x92\x1a\x09\x0f\xca\x57\x2f\x98\xad\x6f\xf1\xb1\xb3\x9f\x45\x09\xad\x6b\xbd\x82\x2f\xa0\x38\x2c\x1f\x6e\x6c\x61\xf7\x3f\xbd\x81\x34\x3d\x40\x6b\x45\x64\x3b\x9d\x86\x7a\xa5\xfb\x4d\x9e\x5d\x76\x77\x5e\x52\xa5\x2c\x8c\x58\xb7\xf0\xa9\x92\x5a\xe7\x1c\xe3\xf3\xa3\x40\x8a\x6a\xe3\x3a\xa8\x3e\x3c\xd0\x71\x8a\xdc\x64\x60\xbb\x1d\x43\x42\xfb\xf5\x07\xbb\xd1\xb2\xfa\xa6\x0d\xee\x75\x6b\x4c\xbb\xe3\x52\x4a\x77\x64\xdc\x8d\xc3\x0d\x9e\x28\xb9\xc1\x7d\x82\x16\xaa\x47\x0b\x0f\x19\xa0\x39\x69\x77\x36\xe4\xbd\x08\xfb\xff\xc6\x5d\xc5\xe0\x76\x09\x0a\x2f\xba\xc3\x2e\x1b\x36\x5b\x9e\x6d\x25\x0b\xec\xaf\xb0\xf9\x68\xfe\xa3\x64\x87\x56\xf9\xe5\x03\x6e\xa5\x23\xe2\x64\xe2\x8e\xd9\xeb\x7c\x16\x2c\xd1\x01\xcc\xbb\x42\x4c\x5a\x42\x7b\xa8\x36\x9e\xa3\xbf\x05\xee\x61\xd1\xdb\xa6\x07\x30\x84\xa6\x1d\x10\x61\xec\xa4\x5e\x91\x94\x6d\xa9\x82\x63\x6b\xb4\xb2\xbb\x1d\xa5\xe2\x1d\xd6\x3e\x7a\x6f\xcb\xc5\x82\xf1\x70\xf8\xfa\x6c\x38\x3a\x1b\x8e\x03\x66\xd9\x2e\x17\xec\x8c\xb5\x08\x76\xbc\x1c\xcc\x8d\xd8\xf7\xa3\xa0\x43\xaf\x28\xa4\x18\x63\x7a\x3a\xb4\x02\x96\x9d\xc8\xa2\xab\xdb\x15\x8d\x5f\xa7\xbc\x8f\xe6\x8a\x1b\xbc\xfd\x1b\x3e\x7d\xfc\x35\x38\xb5\xeb\x19\x2f\xc4\xaa\x4a\x58\x8a\xf7\x2c\xa8\xbd\x8d\x6b\xbb\x72\x25\xb8\xf0\xaf\x79\xc5\x44\x46\x3f\x21\x88\x12\x58\xeb\x8e\x6b\xc1\x89\x3f\x6f\x7d\x68\x5a\xea\x6d\xad\x14\xc2\xb9\x54\xb8\x8e\x99\xe6\xe7\x16\xc5\xdf\xc7\x82\x79\x23\xd8\x14\xc6\xb7\xe6\x28\xce\x5a\x07\xee\xb9\x84\xb2\xd1\x79\x32\xfc\x4f\x32\x3c\xa7\xcc\xb2\xf0\x58\xef\xba\xd9\x9a\x76\xbb\x53\xb7\x2f\xb9\x55\xe9\x58\x90\xe8\x9d\xd0\xce\x9b\xd0\xda\xf6\xef\xa4\xd2\x39\xdb\x34\x36\xfd\xfc\xb2\xbc\x69\xec\x7e\x33\xa1\xb6\xfd\x79\xfa\x67\x00\x00\x00\xff\xff\x94\x1a\x3b\x1a\xa6\x0e\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 3750, mode: os.FileMode(420), modTime: time.Unix(1445213696, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _assetsMainCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\xd1\xb1\x4e\xc3\x30\x10\x06\xe0\x99\x3c\xc5\xa9\x0c\x59\x6c\xc9\x76\x5b\x09\xb9\x13\x1b\x13\x0c\x3c\x81\x09\x97\xe4\x24\xd7\xae\x6c\x03\x2d\x88\x77\xc7\x4d\x68\x25\xcb\x1d\x18\x8a\x32\x44\xfa\x7d\x77\xfa\x74\xf7\xe2\x5f\x0f\xf0\xd5\xdc\xf4\xde\x25\xde\x9b\x2d\xd9\x83\x86\xc5\x03\xda\x77\x4c\xd4\x19\x78\xc4\x37\x5c\x30\x38\x07\x0c\xee\x03\x19\xcb\x20\x1a\x17\x79\xc4\x40\xfd\xa6\xf9\x6e\x9a\x51\x56\x53\xda\x72\x4a\xcb\xa0\x7d\xda\xa1\x83\xe7\xdc\xd9\x96\x03\xe6\xc6\x48\x9f\xa8\x61\x2d\x76\xfb\x53\xf2\x81\x34\x8c\x49\xc3\x52\x88\x1c\x59\x72\xc8\xc7\x53\xa4\xa6\xb2\xad\x09\x03\x39\x0d\x2a\x77\x81\x98\x7e\x39\x4d\xb8\x4f\xdc\x58\x1a\xf2\x4b\x87\x2e\x61\x98\x91\xea\x88\xec\xbc\xf5\x41\xc3\xad\x94\x72\x73\x1d\xb2\xba\xab\xc9\xaa\x26\xab\x92\x2c\xf2\x27\x27\xef\x91\xb6\xfc\x27\xda\x85\x6d\xca\x0b\x34\x51\xd1\xd4\x99\xb6\xbe\xd6\x69\xe5\xea\x4f\xa7\xfd\x2d\x2b\xf6\xb4\x9a\x31\x3f\x01\x00\x00\xff\xff\x60\xf7\x80\x34\xaf\x02\x00\x00")

func assetsMainCssBytes() ([]byte, error) {
	return bindataRead(
		_assetsMainCss,
		"assets/main.css",
	)
}

func assetsMainCss() (*asset, error) {
	bytes, err := assetsMainCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/main.css", size: 687, mode: os.FileMode(420), modTime: time.Unix(1445108440, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/index.html": assetsIndexHtml,
	"assets/main.css": assetsMainCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{assetsIndexHtml, map[string]*bintree{
		}},
		"main.css": &bintree{assetsMainCss, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, Prefix: k}
	}
	panic("unreachable")
}
