// Code generated by go-bindata.
// sources:
// assets/.index.html.swp
// assets/index.html
// assets/main.css
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsIndexHtmlSwp = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x9a\x4d\x8c\x23\x47\x15\xc7\x7b\x43\x20\x18\x12\xb2\x0a\x12\x5a\x89\x4b\xa5\xb3\xc2\x9e\xac\xdd\x6d\x7b\xc9\x07\x1e\xdb\x52\x92\x05\x76\x51\x76\x33\xd2\x6c\xbe\x14\x56\xa1\xdd\x5d\xb6\x7b\xa6\xbb\xcb\xdb\x55\x3d\x1e\x33\xeb\x70\x00\x24\x38\x01\x41\x02\x24\xc4\x81\x43\xee\x08\x21\x24\xc2\x05\x09\xc4\x1e\x38\x20\xe5\x82\x38\x20\x85\xcb\x0a\x24\xe0\x00\x97\x70\xe0\xe3\xff\xaa\xda\x76\xdb\xb3\x23\x86\x4b\x10\x52\xbf\xd5\x6f\xdb\xf5\xf5\xea\xbd\xaa\x57\xd5\xcf\x23\x0f\x9a\x2f\x5c\xb9\xca\x9e\x70\x3e\x6e\x41\xce\x5a\x16\x3f\x7b\xfe\x85\x1f\x5c\x7f\xe3\xde\x6f\xf3\x33\x56\x10\x1e\x78\x89\xf5\x9f\x45\xf7\x6b\xc4\x9e\xef\x44\xc2\xf7\xa2\x13\xfb\xbd\xa6\x3b\xba\x32\xf5\xdd\x51\xa8\xc6\xd9\xc0\xf1\x45\xec\x9a\xca\x91\x18\xf0\xc4\x1f\x67\xa1\xeb\x49\xc9\x95\x74\xc3\x24\xe0\x87\xce\x58\xc5\x27\xeb\x2b\xa5\x94\x52\x4e\x29\x99\x1a\x36\x9e\x7c\xc0\xba\xd8\x6e\x35\xa9\xf8\x88\xfd\x30\xfb\xf0\x43\xcf\xff\xaf\xad\x2a\xa5\x94\x52\x4a\x29\xa5\x94\x52\x4a\x29\xa5\x94\x52\xde\x45\x51\x93\x33\xd6\x17\xf0\xbc\x27\x2f\x1f\xe6\xcf\x33\x1b\xcf\x52\x4a\x29\xa5\x94\x52\x4a\x29\xa5\x94\x52\x4a\x29\xa5\x94\x52\x4a\x29\xe5\xff\x57\xbc\x00\xe0\x79\x83\xfe\x00\x70\x76\xf5\xfd\xff\xef\x0f\x5a\xd6\x5f\xc1\x0f\xc1\x4d\xe0\x82\x3b\x1f\xb2\xac\x37\xc0\xf7\xc0\xb7\x40\x0a\x5e\x06\x17\xc0\xa3\xe0\x1c\xb8\x1f\xbc\xf3\x80\x65\xbd\x0d\xde\x02\x3f\x01\xaf\x83\x23\xf0\x79\xd0\x02\xbf\xbd\xdf\xb2\x7e\x04\xbe\x09\x5e\x07\x09\xa8\x83\x3b\x1f\xb4\xac\xcf\x81\xc7\xc0\x39\x70\xe7\x03\x96\x75\x1b\xcc\xc1\x2d\xb0\x07\xae\x83\x27\x41\x1d\x5c\x00\xff\xaa\x58\xd6\xaf\xc0\x77\x41\x0c\x9e\x05\x2d\x70\x0e\xfc\xe3\xfd\xb0\x03\xbc\x05\x6e\x83\x9f\x82\x37\xc1\x6b\xe0\xb3\xa0\x0a\x1e\x04\xbf\xbb\x0f\xf5\xe0\xfb\xe0\x2b\xe0\x16\x10\xe0\x25\xd0\x03\x1f\x03\x0f\x81\x77\xde\x67\x59\x7f\x02\x6f\x83\xdf\x80\x5f\x83\xdb\xe0\x67\xe0\x4d\xf0\x75\xf0\x2a\xd8\x05\x1f\x05\xf7\x81\xbf\xbd\xd7\xb2\xfe\x0c\x7e\x0f\x7e\x01\x7e\x0c\xbe\x03\x0e\xc1\x4d\xb0\x0f\x38\x78\x11\x3c\x05\x9a\xe0\x51\xf0\x97\x7b\x2d\xeb\x8f\xe0\x0f\xe0\xe7\xe0\x6b\xe0\x4b\xe0\x8b\x20\x03\x2f\x81\x2e\xf8\x08\xf8\xf2\x7b\xb0\x46\x60\x00\x2e\x83\x1a\x60\xe0\x9f\xd8\xd3\x5f\x82\x6f\x80\xaf\x82\x18\xf0\x7b\xf2\xbd\x7e\x37\xa4\xeb\xd2\xef\x37\xfa\x78\x0e\x44\x30\xeb\x5b\x95\x6e\x10\x1e\xb0\x30\xe8\xd9\xbe\x48\x94\x17\x26\x3c\xb5\xfb\x5d\xfa\x05\x08\xb5\xe5\xcf\x4a\x77\xfc\x58\xff\x99\x2c\x4d\x79\xa2\x98\x2f\xe2\x38\x54\x1d\xd6\x95\x13\x2f\xc9\x47\x52\x0d\x0d\xa3\x2a\x3c\xd0\x5b\x0f\x6a\xf7\x77\x95\xa7\x32\x59\xec\x2c\x75\x8d\x4d\x2d\xa9\x0a\x93\x91\xe3\x38\xab\x71\xed\x85\x41\x52\xcd\x22\xde\xb3\x15\x3f\x54\x0d\x2f\x0a\x47\x49\x87\xf9\x98\x9c\x8c\x5b\x33\xeb\x62\x7f\xc7\x53\xe3\x0e\x3b\x3a\x62\xce\xce\xfe\x88\x0a\x6c\x3e\x87\xa6\x8b\x0b\x0b\xf2\x96\x6b\x5e\xcc\x4d\xcb\xe6\x1c\xc3\x48\x78\x70\x27\xe2\x43\x75\x4c\x39\x06\x4f\x43\xa8\x8c\x3c\xa9\x98\xf3\x8c\xf6\x53\xce\xe7\xa4\xf3\x92\xa7\xb8\xf3\x29\x91\xc6\x9e\x62\x76\xbb\xd9\x7c\xbc\xd1\x6c\x35\x9a\x6d\x9b\xe9\x66\x9e\x04\xf8\xc0\x1a\x6c\xa1\x41\xff\x76\x66\xa9\x82\xb5\xd8\xe9\xb5\x6c\x78\x13\xf1\x64\xa5\x07\x73\x98\xd5\x97\x27\x7b\x96\x86\xa3\x31\xb9\xc6\x20\xdd\x71\xab\xff\x69\xc1\x9e\xa6\x1f\xf6\xc4\x5e\xba\xcf\x9e\xbf\x82\x81\xad\xbc\xd1\x95\x7e\x1a\x4e\x54\xdf\xd2\x45\x92\xf9\x36\x26\xae\x1c\x78\x29\xf3\xc7\xd8\x2f\xd6\x63\xe7\x6b\xd5\x47\x96\xa1\x52\xdd\x72\xc6\xd0\xae\xdb\x64\x4d\x4c\x54\x28\x12\xb9\xb5\xbd\x1c\x3e\x85\xdb\x62\xea\x88\x04\x96\x04\x18\x3c\xcc\x12\x9f\xfa\xd4\xb6\xd8\x91\x05\xcd\x46\x3d\x9c\x0a\x87\xcc\xd9\xe5\x69\xc8\xb5\x4b\xb4\x32\x79\xe9\x16\xdb\x93\x22\x79\x55\x2a\x18\x36\xe1\x41\xde\x6a\x16\x86\xc6\xce\xeb\xf4\x7f\x45\xc2\x02\x1e\x74\x98\x4a\x33\xae\x2b\xfc\x54\x48\x54\x86\xa9\x34\x95\xba\x9b\x12\x22\x52\xe1\x04\xe1\x52\x18\xaa\xd5\x2c\x1f\x95\x94\xab\x2c\x4d\x98\x1a\x87\xd2\x39\xf0\xa2\x8c\xb3\x0b\xac\x9a\xc8\xea\xb6\x69\x1f\xea\xbd\x42\x20\x76\x96\xce\x30\xed\x0d\x35\x46\xde\x80\x47\x32\x57\x5f\x51\xa1\x8a\x38\x0a\x8c\xa2\xb8\xc3\xaa\xd7\xc3\x98\x57\x99\x99\x75\xf6\xd4\x61\x28\xd7\xed\xf0\x11\x0a\x23\x41\x4e\x77\xd8\x2b\x37\x4c\x5d\xca\x0f\x78\x2a\x17\x8e\x99\x3a\xd7\x65\x53\xce\x24\x2d\x41\xbe\xf5\x6c\x98\x8a\x18\x31\xaa\x38\xa2\x54\x09\x36\x84\xd7\xaa\xce\xa4\x60\xf9\x78\x1a\x77\x58\x98\x51\x66\x83\x4d\xe3\xfc\x94\x63\x7c\x60\x82\x75\xf9\xcb\xaf\x85\xb9\x9b\xbd\x57\xf1\xb3\x93\x8a\x51\xca\xa5\x5c\xf4\x5c\x2c\x6a\x3d\x5f\xd5\xfc\xb9\x5c\xde\xd5\x87\xca\x7c\x6b\x7b\xf9\x39\x8f\x84\x45\xa1\x6e\xfc\x65\x43\x2f\x92\x7c\xab\xd0\x52\x99\x75\x58\x92\x45\x51\xbd\x58\x97\xe0\x6c\x77\x58\x00\xfb\x8b\xd5\x92\x02\xc8\xf1\x82\x60\x47\x84\x89\xaa\x1d\xad\x9a\x10\x6c\xb5\x87\x87\x22\x4b\x82\xc5\xc6\x1d\xb7\xa7\x60\xe7\x2a\x28\xb4\x39\xc5\x4e\x15\xad\x05\x81\x4d\xe6\x16\x1b\x68\x8a\x50\xf1\xd8\x21\xdb\x58\xaf\xa7\xad\x5b\x9b\xed\xbc\xc3\x3d\x7f\x5c\x33\x56\xa2\xd5\xab\xaf\x4e\x47\x18\x1c\xd6\x19\x0d\x5f\x1b\xb1\x98\x6b\xc3\x8a\xa5\xa2\x68\xe8\x68\x6d\xb2\xa8\x89\xae\x1d\x84\x02\xd5\x17\x95\x21\x88\x60\xa2\x8e\x6f\xc9\x70\x74\x58\x1c\x4a\x49\xb7\x71\xb1\xc7\x35\x31\xd5\x66\xa4\xb0\x9d\x09\x44\x12\xdb\x4f\xc4\x34\x61\x8b\x59\x3c\x98\x13\x26\x28\x29\xbd\x27\xd2\x3a\x61\x6b\x8b\xab\xba\xb6\xc6\xf9\xce\xe9\x60\x73\xe8\x86\x5e\xdb\xd6\x30\x38\xb1\x89\xd6\x0b\xa7\x84\x96\xe8\xc6\xfa\x9e\x63\x11\xb0\xe5\xe6\xf2\x28\xee\xf9\x9c\xe1\x64\x72\x44\x30\xfc\x62\x09\x9f\xe6\x4e\x6c\xc6\x8b\x5c\x05\x0c\x29\x5f\x8f\xc3\xed\xf5\x10\x32\x03\xb6\x8c\x4e\x53\x60\x5e\x84\x73\x14\xcc\x18\xc7\x61\x53\x05\xed\xb8\x31\xa5\x88\xb8\x13\x89\x51\xcd\x36\x7d\xed\x7a\xd1\xbb\x5c\x41\x71\x0e\xba\x75\x73\xb5\x3d\xa6\x3d\x1b\x71\x55\x5b\x8d\x41\xdf\x13\xce\xcf\x6c\xb9\x70\x72\x87\xa7\xcf\x4d\x8a\x4b\x74\xd7\xc3\x42\xbe\x62\x92\xa3\x82\x42\xea\x81\xaa\x58\xc4\x78\xef\xd6\x70\xc4\xb3\x48\x39\xe6\xc2\x71\x74\x30\x3b\xe6\x2a\xac\x55\x5f\x86\x34\xae\x5e\x6d\x5c\xba\xc4\x2e\x5f\xee\xc4\x71\x07\xb7\xc1\xa6\x1f\xda\x1c\xa8\xd3\x11\xf7\x4a\xf3\xc6\xb1\xf0\xcd\x27\x90\x5c\x15\xa2\x77\x9f\xcf\xea\x66\x48\x31\x76\x4d\x57\xb2\x4d\x8e\x1c\x53\x58\xaa\xcb\xb7\x99\xb6\x87\x5a\xd5\x6c\x42\xa7\xaf\xc7\xaa\xa6\x5f\xb5\xa8\x27\x10\x7e\x46\xce\xd1\xb2\x7e\x32\xe2\xf4\xf1\xe9\xd9\x95\xa0\x56\x35\x5e\xe2\xdd\x16\x26\x78\xc7\x5d\xbe\x7e\xf5\x59\x66\x0e\x30\xbd\x0a\x58\xad\x8a\x07\x29\xcf\x17\x03\x97\xe9\x1e\xf7\x15\xb5\x6d\x51\x53\xb5\x3b\x48\x99\xdb\xd7\x1f\x2f\x7b\x12\xc9\xc9\xc6\x80\x31\x2a\x57\xfe\xaf\xaf\x73\xa1\xdb\x7f\xb5\xc8\x27\xfa\x62\xd2\xad\x0d\x5f\x68\x16\xd3\xb0\xd4\x70\x7c\xc5\x16\x23\x0b\x51\x81\x0e\x18\xfd\x99\xdd\xe7\xae\x39\x13\x0f\xef\x95\x9a\xb9\xb9\x96\x76\x48\xe1\xef\xe3\x65\x1f\xe3\x7d\xe0\x8d\x78\xf1\x7d\x5f\xd8\xc0\xbc\x93\x1f\x09\x79\xac\x0b\x5b\x3b\x27\x28\x24\xdc\xbc\x62\x75\xef\x80\xd5\x6c\x2c\x25\xc7\x0a\x05\xb4\x17\xf6\x96\xbd\xb5\xcd\xe6\xeb\x7a\xc5\x04\xf9\xd1\x7a\xa6\x71\x57\xad\xd0\x86\x57\x25\xe9\x9b\xca\x2c\x0d\xb5\x22\xab\x78\xf0\xa2\x21\xdd\xeb\x48\x03\xb6\x8b\xd5\x98\x04\xd5\x74\x81\xbc\xc8\x07\xbb\x28\xe1\x48\xe6\x0a\x4c\x37\xca\x74\xee\x96\x1b\xe0\x4d\x9c\xa8\x65\x6e\x90\x1b\x71\x8d\xae\xcd\xe2\xcb\x9d\x96\x1f\x01\x23\x27\x11\xd2\xab\xaa\xae\xd3\xc9\x95\x19\x47\x16\xe4\x49\x96\x39\xad\x8b\x3c\x8b\x1a\xb4\x15\xa8\xb6\xa7\xb2\xe3\xba\xad\xf6\x13\x4e\x13\xff\x5a\x9d\xc7\xdb\xed\xb6\x3b\x95\xf6\xf6\x5a\xef\x85\x23\x30\xc0\x34\x74\x4d\xee\xc7\xc8\x02\x93\x78\xbb\x7b\xde\x81\x67\x6a\x91\x3d\x76\xcd\xf7\x05\x64\x8b\xb8\xe0\x28\xd1\x84\x85\xfb\x48\x30\x22\x4a\xe9\x91\x6e\xca\x31\xe7\xca\x2e\x0e\xf7\xa5\xb4\xd9\x38\xe5\xc3\x9e\xed\x52\x30\x85\xbe\x1b\x23\x6b\x74\xa8\x9e\x14\xe4\x13\xca\xd4\xef\xd9\x63\xa5\x26\xb0\x9a\x36\xb6\x90\x51\xea\x1f\xa3\xc7\x22\xc8\xa0\xde\xe5\x87\x13\x61\xbe\x31\xec\x49\xfd\x5d\x23\xcf\x55\x4f\xad\xa8\x50\x3c\x85\x06\x73\x20\xf7\xcc\x50\x24\xb1\x3a\x85\x95\x79\xf5\xa9\x4d\xd8\xbb\x99\xf1\x74\xa6\x75\x98\x8f\x8d\x96\xf3\x09\xa7\xb5\x31\xbe\x6b\xd6\xb4\x6b\xbe\x9a\xfd\x3b\x00\x00\xff\xff\xd7\x18\x95\x1b\x00\x30\x00\x00")

func assetsIndexHtmlSwpBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtmlSwp,
		"assets/.index.html.swp",
	)
}

func assetsIndexHtmlSwp() (*asset, error) {
	bytes, err := assetsIndexHtmlSwpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/.index.html.swp", size: 12288, mode: os.FileMode(420), modTime: time.Unix(1445204090, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x57\x6f\x6f\xdb\x36\x13\x7f\xad\x7c\x8a\x7b\xf4\x14\xb0\x8c\xda\x52\xec\xa2\x1d\xe6\xd8\x06\xd6\x76\x5b\x3a\xac\x69\x80\x74\x18\x86\xa2\x18\x18\x89\xb6\x98\x48\xa2\x47\x52\x71\x8c\xcc\xdf\x7d\x77\xa4\x64\x51\x4e\xba\x75\x53\x81\x46\xe2\xdd\xfd\xee\xff\xf1\x3c\xcf\x4d\x59\x2c\x4f\xe6\x39\x67\xd9\xf2\x24\x98\xeb\x54\x89\x8d\x01\xad\xd2\x45\x98\x1b\xb3\x99\x25\x49\x2a\x33\x1e\xdf\xfc\x51\x73\xb5\x8b\x53\x59\x26\xee\x75\x3c\x89\xbf\x8d\x27\xf1\x8d\x0e\x97\xf3\xc4\x49\x7d\x41\xbe\x94\x25\xaf\xcc\x8d\xb6\xc2\x99\xdc\x56\x85\x64\x99\x6e\x8e\xbf\x06\xc0\x1a\x90\x8b\x75\x9e\xe6\x4c\x19\x87\xe3\x7d\xfe\x47\x84\x52\x66\x75\xc1\x75\xc2\xef\x37\x52\x19\x51\xad\x1f\x01\x15\xa2\xba\x05\xc5\x8b\x45\xa8\xcd\x0e\x59\x73\xce\x4d\x08\x66\xb7\xe1\x8b\xd0\xf0\x7b\x93\xa4\x5a\x87\x90\x2b\xbe\x5a\x84\x89\x36\xcc\x88\x34\x29\x99\xa8\x62\x3a\xc7\x98\x26\x2e\xa8\xf3\x6b\x99\xed\x96\x27\x80\x4f\x6b\x9b\x87\x71\xc3\xee\x98\x3b\x0d\x1d\x0f\x3d\x77\x4c\x81\x96\xe9\x2d\x2c\xa0\xaa\x8b\xe2\xac\x47\xd8\xea\x5a\x09\xa4\x84\x5b\x8d\xae\x4d\xa6\xdf\xc4\xa7\xf8\x6f\x32\x7b\x35\x9d\x4e\x93\xad\x0e\xcf\x4e\x4e\x82\x80\x18\xe5\xc6\x08\x59\x69\x64\x7d\xc0\x93\xc0\xfa\x3e\x73\xef\x01\x59\x30\x83\x81\xde\xa0\x93\x7c\x30\xb2\x67\xa9\xac\x2a\x9e\x9a\x0b\xd4\xa8\x67\x60\x54\xcd\xdd\x39\xbf\xc3\x44\xe9\x56\x32\xa0\xf4\xcd\x60\x55\x57\x29\xc1\x43\x34\x6c\x09\x81\x6f\x36\xdf\xc2\xaf\xfc\xfa\x0a\xbf\xb8\x89\xac\xc9\xc3\x33\x9f\x8d\x17\x2b\x64\x33\xb9\xd0\xd6\x5e\x7a\x48\x34\x96\x95\xdc\xf0\x0a\x49\xad\x02\xc2\x07\x34\x4d\xcb\x82\xc7\x85\x5c\x47\x61\x63\x27\xcf\xc0\x48\x08\xe1\x39\x34\xf0\xb0\xef\x03\xa5\x85\xd4\xdc\x47\xe2\x5f\x82\x22\x3f\x2c\x77\x06\x11\x01\xf2\x98\x2a\x06\x5f\xc2\x61\xf8\x18\xb7\xe4\x5a\xb3\xf5\x23\xe4\x86\x29\x28\xf5\x1a\x49\x3f\x5d\x7d\xb8\x88\x37\x4c\x69\x1e\xf1\x38\x63\x86\x0d\x0f\x7e\x06\x62\x05\x11\x72\xc5\x94\x04\x58\x2c\x16\x98\x07\xac\x9e\x5a\x0f\x3c\x94\x20\x93\x69\x6d\x3b\x64\xcd\xcd\xf7\x05\xa7\xd7\xd7\xbb\x77\x59\x74\xe0\x8d\x05\xda\xae\xce\x3f\xbe\xff\x19\xd5\x11\x9c\x23\x9c\x75\x08\xcc\x90\x91\xae\xd1\xac\x42\xac\xfb\x52\x18\x32\x87\x0f\xe3\x95\x54\x25\x33\xd1\xe0\x37\x7c\xc6\xef\xdf\x8f\xdf\xbe\x85\xf3\xf3\x59\x59\xce\x34\x82\x9f\xfd\xb3\x1d\x0e\xec\xc8\x0e\xab\xf3\x39\x0c\x20\x1a\xe0\x1f\x4f\xa7\xae\xaf\x6f\x30\xd2\x44\x1b\x12\x69\x30\xbf\x56\x90\x2c\xed\xeb\x39\xd3\x39\x16\x63\x5f\x20\xc7\xc3\x83\x15\x7b\xe0\x05\xe6\xf2\x71\xe0\x14\xd7\x75\x61\x7a\x81\x73\x47\x4d\x4c\xdc\x47\xe7\xcd\xb3\x98\xb3\x34\x8f\xdc\x71\xac\xb9\x19\x75\x49\xbc\xe5\xbb\x11\x76\x58\x51\xfb\xd9\x74\xe5\x7a\xcd\xab\x34\x47\x48\x4b\xfd\x74\xfa\xb9\x03\x3c\x8a\x72\x03\xfc\x6f\x02\xdd\x41\x09\xc3\xcb\xb6\x5b\x9b\xa7\x62\x25\xf6\x29\xe1\x8c\xbc\xd3\xdd\xcc\x59\x14\x5f\xe8\x4b\xae\x3e\x6c\x3c\xda\xde\x07\x74\x9d\xa6\x04\xa7\x21\x40\x2d\x47\x49\x8c\x1a\x51\x44\xf6\xd2\x1c\xf4\xfa\xc2\x09\x85\x23\xe8\x78\x47\x0d\x92\x2f\x43\xf9\x68\x4e\xb1\xb3\x92\xa4\x55\xc6\x0a\x85\xa3\x6f\x07\xfc\x5e\x68\xa3\x3d\xc3\x1d\x3d\x66\x59\x76\x29\x05\x86\x8b\x3c\x1e\xb9\x51\x03\x2b\x86\x29\xf6\xd1\x9b\xa4\x5b\x60\x3b\x50\x9c\x74\x0f\x0e\x5d\x42\xb0\x2b\x4b\x88\xfc\xc0\x51\x5e\xd8\x0c\x3e\x91\x86\xcf\x7e\xec\x02\x91\xcd\x7c\xb7\x7c\x92\x8b\xf6\xd3\xc4\x7d\xcf\xb4\x13\xff\xf8\xf0\x81\x86\x5e\xc8\xed\x08\x50\xa9\xa2\xb2\x90\x77\x5c\xc1\x6d\x85\x77\x5e\x63\xfb\x08\x58\x95\x81\xa8\xf0\xcb\xd8\xd1\xae\x7d\x59\x0c\xa7\x2d\x30\x0c\xa0\xe2\x50\x0a\xad\xe9\x5a\x3a\xae\x5d\xeb\x74\x0b\x77\x28\x5e\x51\x65\xfc\xbe\xc9\x51\xaf\x7c\x57\xb2\x46\x95\x0b\x17\x5e\xcf\x85\x03\x1a\x0a\xd8\x01\xe5\x83\x65\xf7\xd6\x89\xb2\x87\x64\xd3\x4d\xa7\x31\xc5\x09\xfb\xcf\xd6\x65\x9f\xe5\xa0\x8e\x72\x7a\xe6\x13\x14\x37\xb5\xaa\x1e\x99\xe1\x85\xb2\x1f\x62\x52\xf6\x3f\x8b\xd6\xd7\xe0\x0c\x3e\x54\xd0\xc3\xe3\xfc\x1d\x77\x0b\xb5\x0b\xc5\xba\x97\xcd\x7e\xd5\xf5\xfa\xe7\x09\x73\x5a\x23\x9b\xbf\x7b\x07\xe5\xfe\xb8\xff\x8d\x30\x05\xea\x7e\x00\xba\xd5\x71\x98\xbd\xa6\x22\x2a\x99\xba\x85\x4b\x25\xd7\x38\x16\xf4\x00\x1c\x27\x4e\xc2\x63\xe6\x14\xdb\x85\xee\xb3\xad\x30\x39\xac\xa5\x2d\xc0\x5a\xb4\x02\xf7\xdf\x61\x1b\xb5\xd7\x2f\x96\xc9\x96\x63\x9a\x31\xc8\x6e\xc8\x68\x58\x29\x59\x42\x81\x00\xda\xd0\x8d\xb8\x12\x4a\xe3\x58\xd3\x12\x77\x17\xac\x3f\xcd\x4f\x5c\xf8\xed\x7b\xe6\x5f\xec\x29\xca\xac\x25\x15\x12\x36\xca\x67\xcf\x99\x9d\xaf\xf1\xd8\xd8\x8f\xa2\xe4\xad\x69\x41\xc1\xae\x79\xd1\xed\x06\x6e\xd4\x61\xf5\x3f\xbd\x20\x34\x35\x40\xb7\x7e\x6c\x2b\x9d\xa6\x7f\xa5\x07\x4d\x9c\x5d\x74\xf7\x5e\x50\xa5\x2c\x8c\xd8\xb4\xf0\xa9\x92\x5a\xe7\x0c\xfd\xf3\xbd\xc0\x13\xd5\xfa\xd5\x89\x3e\x3c\x50\x3b\xc5\x6e\x32\xc0\x7e\x0f\x78\xd0\x7e\xfd\x09\x37\x5a\x56\xbf\x6b\x83\x6b\xd7\x06\xc3\xee\xa8\x14\xd2\x3d\x29\xa7\x11\xda\x2e\x5c\x5b\xec\x2b\xb9\xc5\x4b\x9f\xb6\x9e\xa3\xad\x84\xd4\xd0\x84\xb5\x8b\x15\xd2\x9e\x45\x83\xff\xe3\x14\x35\xb8\x02\x72\x85\xf7\x62\xb7\x70\x46\xcd\x2a\x36\xec\x36\xb9\x56\x49\xb7\x70\xda\xaf\x7c\xb2\xfc\x51\x42\x57\x3c\xbf\xbc\xc3\x35\x72\x42\xdb\x68\x26\xee\xc0\xee\xa1\x8b\x70\x85\xc6\x60\x26\x14\xe2\xd3\xd6\x18\x04\xf3\x7c\xba\x44\x0f\x0a\x5c\x9c\xe2\x37\x4d\x55\xa0\x53\x4d\x81\x20\xc2\xd4\x71\xbd\x20\x2e\x5b\x64\x05\xc3\x62\x69\x79\xf7\x7b\x0a\xce\x5b\xac\x86\xf8\x07\x9b\x40\x08\xa7\xa7\xa7\xaf\xc6\xa7\x93\xf1\xe9\x34\x04\x4b\x76\xd1\x81\x31\xb4\x08\x76\xe0\x74\xea\x26\xf0\xf5\x28\x68\xd0\x0b\x72\x29\x41\x9f\x9e\x76\xad\xe0\xab\x9e\x67\xf1\xe5\xed\x9a\x06\xb2\x13\x3e\x78\x73\xc9\x0c\x2e\x0e\x0d\x9d\x3e\xfe\x1e\x9c\x0a\x78\xcc\x0a\xb1\xae\x66\x90\xe2\x6d\xcd\xd5\x41\xc7\x95\xdd\x9d\x66\xb8\xa1\x6f\x58\x05\x22\xa3\x9d\x9f\x4e\x42\xa2\xb8\x9f\x07\x71\x8c\xb9\x42\xea\xb2\xb3\xe0\xe5\xf2\x4d\xad\x14\x22\x35\xa1\xf6\xe5\xdd\x89\xfd\x45\xd1\x08\xbd\x3c\x36\xcb\xb1\x35\x05\x43\x9c\x96\x36\x4f\xdc\x0f\x06\x94\xb0\xbf\xcd\xfe\x0a\x00\x00\xff\xff\xb3\x49\x67\xf6\xa3\x0d\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 3491, mode: os.FileMode(420), modTime: time.Unix(1445204069, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _assetsMainCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\xd1\xb1\x4e\xc3\x30\x10\x06\xe0\x99\x3c\xc5\xa9\x0c\x59\x6c\xc9\x76\x5b\x09\xb9\x13\x1b\x13\x0c\x3c\x81\x09\x97\xe4\x24\xd7\xae\x6c\x03\x2d\x88\x77\xc7\x4d\x68\x25\xcb\x1d\x18\x8a\x32\x44\xfa\x7d\x77\xfa\x74\xf7\xe2\x5f\x0f\xf0\xd5\xdc\xf4\xde\x25\xde\x9b\x2d\xd9\x83\x86\xc5\x03\xda\x77\x4c\xd4\x19\x78\xc4\x37\x5c\x30\x38\x07\x0c\xee\x03\x19\xcb\x20\x1a\x17\x79\xc4\x40\xfd\xa6\xf9\x6e\x9a\x51\x56\x53\xda\x72\x4a\xcb\xa0\x7d\xda\xa1\x83\xe7\xdc\xd9\x96\x03\xe6\xc6\x48\x9f\xa8\x61\x2d\x76\xfb\x53\xf2\x81\x34\x8c\x49\xc3\x52\x88\x1c\x59\x72\xc8\xc7\x53\xa4\xa6\xb2\xad\x09\x03\x39\x0d\x2a\x77\x81\x98\x7e\x39\x4d\xb8\x4f\xdc\x58\x1a\xf2\x4b\x87\x2e\x61\x98\x91\xea\x88\xec\xbc\xf5\x41\xc3\xad\x94\x72\x73\x1d\xb2\xba\xab\xc9\xaa\x26\xab\x92\x2c\xf2\x27\x27\xef\x91\xb6\xfc\x27\xda\x85\x6d\xca\x0b\x34\x51\xd1\xd4\x99\xb6\xbe\xd6\x69\xe5\xea\x4f\xa7\xfd\x2d\x2b\xf6\xb4\x9a\x31\x3f\x01\x00\x00\xff\xff\x60\xf7\x80\x34\xaf\x02\x00\x00")

func assetsMainCssBytes() ([]byte, error) {
	return bindataRead(
		_assetsMainCss,
		"assets/main.css",
	)
}

func assetsMainCss() (*asset, error) {
	bytes, err := assetsMainCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/main.css", size: 687, mode: os.FileMode(420), modTime: time.Unix(1445108440, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/.index.html.swp": assetsIndexHtmlSwp,
	"assets/index.html": assetsIndexHtml,
	"assets/main.css": assetsMainCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		".index.html.swp": &bintree{assetsIndexHtmlSwp, map[string]*bintree{
		}},
		"index.html": &bintree{assetsIndexHtml, map[string]*bintree{
		}},
		"main.css": &bintree{assetsMainCss, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, Prefix: k}
	}
	panic("unreachable")
}
