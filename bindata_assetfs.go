// Code generated by go-bindata.
// sources:
// assets/index.html
// assets/main.css
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x57\xff\x6f\xdb\xb6\x12\xff\x59\xf9\x2b\xf8\xf4\x0a\x58\x41\x6d\x2a\x76\xd1\x3e\x3c\xc7\x36\xf0\xda\xbe\x2d\x1d\xd6\x34\x40\x3a\x0c\x43\xd1\x1f\x18\xe9\x6c\x31\x91\x44\x8f\xa4\xe2\x18\x81\xff\xf7\xdd\x91\x92\x4d\x39\xe9\xd6\x4d\x05\x6a\x89\x77\xf7\xb9\xef\xc7\xcb\xac\xb0\x55\xb9\x38\x99\x15\x20\xf2\xc5\x49\x34\x33\x99\x96\x6b\xcb\x8c\xce\xe6\x71\x61\xed\x7a\x9a\xa6\x99\xca\x81\xdf\xfe\xde\x80\xde\xf2\x4c\x55\xa9\x7f\x1d\x8d\xf9\x7f\xf9\x98\xdf\x9a\x78\x31\x4b\xbd\xd4\x37\xe4\x2b\x55\x41\x6d\x6f\x8d\x13\xce\xd5\xa6\x2e\x95\xc8\x4d\x7b\xfc\x3d\x00\xce\x80\x42\xae\x8a\xac\x10\xda\x7a\x9c\xe0\xf3\x1f\x22\x54\x2a\x6f\x4a\x30\x29\x3c\xac\x95\xb6\xb2\x5e\x3d\x01\x2a\x65\x7d\xc7\x34\x94\xf3\xd8\xd8\x2d\xb2\x16\x00\x36\x66\x76\xbb\x86\x79\x6c\xe1\xc1\xa6\x99\x31\x31\x2b\x34\x2c\xe7\x71\x6a\xac\xb0\x32\x4b\x2b\x21\x6b\x4e\xe7\x18\xd3\xd4\x07\x75\x76\xa3\xf2\xed\xe2\x84\xe1\xd3\xd9\x16\x60\xdc\x8a\x7b\xe1\x4f\x63\xcf\x43\xcf\xbd\xd0\xcc\xa8\xec\x8e\xcd\x59\xdd\x94\xe5\x79\x8f\xb0\x31\x8d\x96\x48\x89\x37\x06\x5d\x1b\x4f\xfe\xc3\xcf\xf0\xdf\x78\xfa\x66\x32\x99\xa4\x1b\x13\x9f\x9f\x9c\x44\x11\x31\xaa\xb5\x95\xaa\x36\xc8\xfa\x88\x27\x91\xf3\x7d\xea\xdf\x23\xb2\x60\xca\x06\x66\x8d\x4e\xc2\x60\xe8\xce\x32\x55\xd7\x90\xd9\x4b\xd4\x68\xa6\xcc\xea\x06\xfc\x39\xdc\x63\xa2\x4c\x27\x19\x51\xfa\xa6\x6c\xd9\xd4\x19\xc1\xb3\xe4\xb4\x23\x44\xa1\xd9\xb0\x61\xbf\xc2\xcd\x35\x7e\x81\x4d\x9c\xc9\xa7\xe7\x21\x1b\x94\x4b\x64\xb3\x85\x34\xce\x5e\x7a\x48\x94\xab\x5a\xad\xa1\x46\x52\xa7\x80\xf0\x19\x9a\x66\x54\x09\xbc\x54\xab\x24\x6e\xed\x84\x9c\x59\xc5\x62\xf6\x92\xb5\xf0\x6c\xd7\x07\xca\x4a\x65\x20\x44\x82\x6f\x41\x91\x1f\x8e\x3b\x67\x09\x01\x02\xa7\x8a\xc1\x97\xf8\x34\x7e\x8a\x5b\x81\x31\x62\xf5\x04\xb9\x65\x8a\x2a\xb3\x42\xd2\x4f\xd7\x9f\x2e\xf9\x5a\x68\x03\x09\xf0\x5c\x58\x71\xba\xf7\x33\x92\x4b\x96\x20\x17\xa7\x24\xb0\xf9\x7c\x8e\x79\xc0\xea\x69\xcc\x20\x40\x89\x72\x95\x35\xae\x43\x56\x60\xff\x5f\x02\xbd\xbe\xdd\x7e\xc8\x93\x3d\x2f\x97\x68\xbb\xbe\xf8\xfc\xf1\x67\x54\x47\x70\x9e\x70\x7e\x40\x10\x96\x8c\xf4\x8d\xe6\x14\x62\xdd\x57\xd2\x92\x39\x70\xca\x97\x4a\x57\xc2\x26\x83\xdf\xf0\x19\x7d\xfc\x38\x7a\xff\x9e\x5d\x5c\x4c\xab\x6a\x6a\x10\xfc\xfc\xaf\xed\xf0\x60\x47\x76\x38\x9d\x2f\xd9\x80\x25\x03\xfc\x09\x74\x9a\xe6\xe6\x16\x23\x4d\xb4\x53\x22\x0d\x66\x37\x9a\xa5\x0b\xf7\x7a\x21\x4c\x81\xc5\xd8\x17\x28\xf0\x70\x6f\xc5\x8e\x41\x89\xb9\x7c\x1a\x38\x0d\xa6\x29\x6d\x2f\x70\xfe\xa8\x8d\x89\xff\x38\x78\xf3\x82\x83\xc8\x8a\xc4\x1f\x73\x03\x76\x78\x48\xe2\x1d\x6c\x87\xd8\x61\x65\x13\x66\xd3\x97\xeb\x0d\xd4\x59\x81\x90\x8e\xfa\xe5\xec\xeb\x01\xf0\x28\xca\x2d\xf0\xdf\x09\xf4\x01\x4a\x5a\xa8\xba\x6e\x6d\x9f\x5a\x54\xd8\xa7\x84\x33\x0c\x4e\xb7\x53\x6f\x11\xbf\x34\x57\xa0\x3f\xad\x03\xda\x2e\x04\xf4\x9d\xa6\x25\xd0\x10\xa0\x96\xa3\x24\x26\xad\x28\x22\x07\x69\x8e\x7a\x7d\x71\xed\x84\xe2\x61\x2b\x1d\xf2\x51\x0e\xda\x53\xec\xa6\x34\xed\x14\x88\x52\xe3\xb8\xdb\x32\x78\x90\xc6\x9a\xc0\x58\x4f\xe7\x22\xcf\xaf\x94\xc4\x10\x91\x97\x43\x3f\x5e\xd8\x52\x60\x5a\x43\xf4\x36\xd1\x0e\xd8\x0d\x11\x2f\xdd\x83\x43\x37\x10\xcc\x9b\x98\x84\xc1\xa2\x5c\x88\x29\xfb\x42\x1a\xbe\x86\xf1\x8a\x64\xbe\x8f\x18\xba\xdd\x23\xf9\x08\x3f\x4f\xdc\xf5\x4c\x3b\x09\x8f\xf7\x1f\x68\xe8\xa5\xda\x0c\x19\x2a\xd5\x54\x0a\xea\x1e\x34\xbb\xab\xf1\x9e\x6b\x6d\x1f\x32\x51\xe7\x4c\xd6\xf8\x65\xdd\x38\x37\xa1\x2c\x86\xd3\x15\x15\x06\x50\x03\xab\xa4\x31\x74\x15\x1d\xd7\xab\x73\xba\x83\xdb\x17\xac\xac\x73\x78\x68\x73\xd4\x2b\xd9\xa5\x6a\x50\xe5\xdc\x87\x37\x70\x61\x8f\x86\x02\x6e\x28\x85\x60\xf9\x83\x73\xa2\xea\x21\xb9\x74\xd3\x29\xa7\x38\x61\xcf\xb9\x5a\xec\xb3\xec\xd5\x51\x4e\xcf\x43\x82\x06\xdb\xe8\xfa\x89\x19\x41\x28\xfb\x21\x26\x65\xff\x72\x68\x7d\x0d\xde\xe0\x7d\x05\x3d\x3e\xcd\xdf\x71\x87\x50\x8b\x50\xac\x7b\xd9\xec\x57\x5d\xaf\x67\x9e\x31\xa7\x33\xb2\xfd\xdd\x79\x28\xff\xe3\xff\xb7\xd2\x96\xa8\xfb\x91\xd1\x4d\x8e\x03\xec\x2d\x15\x51\x25\xf4\x1d\xbb\xd2\x6a\x85\xa3\xc0\x0c\x98\xe7\xc4\xe9\x77\xcc\x9c\x61\xbb\xd0\x1d\xb6\x91\xb6\x60\x2b\xe5\x0a\xb0\x91\x9d\xc0\xc3\xff\xb0\x8d\xba\x2b\x17\xcb\x64\x03\x98\x66\x0c\xb2\x1f\x2c\x86\x2d\xb5\xaa\x58\x89\x00\xc6\xd2\x2d\xb8\x94\xda\xe0\x28\x33\x0a\xf7\x15\xac\x3f\x03\x27\x3e\xfc\xee\x3d\x0f\x2f\xf3\x0c\x65\x56\x8a\x0a\x09\x1b\xe5\x6b\xe0\xcc\x36\xd4\x78\x6c\xec\x67\x59\x41\x67\x5a\x54\x8a\x1b\x28\x0f\xfb\x80\x1f\x6f\x58\xfd\xcf\x2f\x05\x6d\x0d\xd0\x4d\xcf\x5d\xa5\xd3\xc4\xaf\xcd\xa0\x8d\xb3\x8f\xee\x2e\x08\xaa\x52\xa5\x95\xeb\x0e\x3e\xd3\xca\x98\x42\xa0\x7f\xa1\x17\x78\xa2\x3b\xbf\xf6\xa2\x34\xfa\xba\x45\x69\x83\xbd\xa1\x36\x78\x59\xd3\xb6\x72\xb4\x4d\x90\x00\x4d\x46\xb7\x10\x21\xed\x45\x32\xf8\x37\x4e\x3f\x8b\xab\x1b\x68\xbc\xcf\x0e\x8b\x62\xd2\xae\x50\xa7\x87\x0d\xac\x53\x72\x58\x14\xdd\x57\x31\x5e\xfc\xa8\xd8\xa1\x00\x7e\xf9\x80\xeb\xdf\x98\xb6\xc8\x5c\xde\x33\xb7\x3f\xce\xe3\x25\x1a\x83\xd1\xd4\x88\x4f\xdb\x5e\x14\xcd\x8a\xc9\xe2\xf1\x91\x95\xb8\xf0\xf0\x77\x6d\x66\x77\xbb\x2e\xc9\x88\x30\xf1\x5c\xaf\x88\xcb\x15\x4a\x29\x30\xe1\x1d\xef\x6e\x87\xc7\xfc\x3d\x66\x94\xff\xe0\x92\xc0\xe2\xc9\xd9\xd9\x9b\xd1\xd9\x78\x74\x36\x89\x99\x23\x53\xd1\x20\xe4\x88\x75\x08\x6e\x68\x1c\xd4\x8d\xd9\xf7\xa3\xa0\x41\xaf\xc8\xa5\x14\x7d\x7a\xde\xb5\x12\x96\x3d\xcf\xf8\xd5\xdd\x8a\x86\xaa\x17\xde\x7b\x73\x25\x2c\x5e\xf8\x2d\x9d\x3e\xfe\x1c\x9c\x8a\x70\x24\x4a\xb9\xaa\xa7\x2c\xc3\x5b\x16\xf4\x5e\xc7\xb5\xdb\x79\xa6\xb8\x59\xaf\x45\xcd\x64\x4e\xbb\x3a\x9d\xc4\x44\xf1\x6b\x3d\xe7\x98\x2b\xa4\x2e\x0e\x16\xbc\x5e\xbc\x6b\xb4\x46\xa4\x36\xd4\xa1\xbc\x3f\x71\x7f\x09\xb4\x42\xaf\x8f\xcd\xf2\x6c\x6d\xc1\x10\xa7\xa3\xe1\xc2\xef\x37\x7d\x14\x71\x7f\x54\xfd\x11\x00\x00\xff\xff\xdc\x75\x54\x9e\x5c\x0d\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 3420, mode: os.FileMode(420), modTime: time.Unix(1445118768, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _assetsMainCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\xd1\xb1\x4e\xc3\x30\x10\x06\xe0\x99\x3c\xc5\xa9\x0c\x59\x6c\xc9\x76\x5b\x09\xb9\x13\x1b\x13\x0c\x3c\x81\x09\x97\xe4\x24\xd7\xae\x6c\x03\x2d\x88\x77\xc7\x4d\x68\x25\xcb\x1d\x18\x8a\x32\x44\xfa\x7d\x77\xfa\x74\xf7\xe2\x5f\x0f\xf0\xd5\xdc\xf4\xde\x25\xde\x9b\x2d\xd9\x83\x86\xc5\x03\xda\x77\x4c\xd4\x19\x78\xc4\x37\x5c\x30\x38\x07\x0c\xee\x03\x19\xcb\x20\x1a\x17\x79\xc4\x40\xfd\xa6\xf9\x6e\x9a\x51\x56\x53\xda\x72\x4a\xcb\xa0\x7d\xda\xa1\x83\xe7\xdc\xd9\x96\x03\xe6\xc6\x48\x9f\xa8\x61\x2d\x76\xfb\x53\xf2\x81\x34\x8c\x49\xc3\x52\x88\x1c\x59\x72\xc8\xc7\x53\xa4\xa6\xb2\xad\x09\x03\x39\x0d\x2a\x77\x81\x98\x7e\x39\x4d\xb8\x4f\xdc\x58\x1a\xf2\x4b\x87\x2e\x61\x98\x91\xea\x88\xec\xbc\xf5\x41\xc3\xad\x94\x72\x73\x1d\xb2\xba\xab\xc9\xaa\x26\xab\x92\x2c\xf2\x27\x27\xef\x91\xb6\xfc\x27\xda\x85\x6d\xca\x0b\x34\x51\xd1\xd4\x99\xb6\xbe\xd6\x69\xe5\xea\x4f\xa7\xfd\x2d\x2b\xf6\xb4\x9a\x31\x3f\x01\x00\x00\xff\xff\x60\xf7\x80\x34\xaf\x02\x00\x00")

func assetsMainCssBytes() ([]byte, error) {
	return bindataRead(
		_assetsMainCss,
		"assets/main.css",
	)
}

func assetsMainCss() (*asset, error) {
	bytes, err := assetsMainCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/main.css", size: 687, mode: os.FileMode(420), modTime: time.Unix(1445108440, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/index.html": assetsIndexHtml,
	"assets/main.css": assetsMainCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{assetsIndexHtml, map[string]*bintree{
		}},
		"main.css": &bintree{assetsMainCss, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, Prefix: k}
	}
	panic("unreachable")
}
