// Code generated by go-bindata.
// sources:
// assets/index.html
// assets/main.css
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x57\xff\x6f\xdb\xb6\x12\xff\x59\xf9\x2b\xf8\xf4\x0a\x58\x41\x1d\x2a\x76\xd1\x3e\x3c\xc7\x36\xf0\xda\xbe\x2d\x1d\xd6\x34\x40\x3a\x0c\x43\xd1\x1f\x18\xe9\x6c\x31\x91\x44\x8f\xa4\xe2\x18\x81\xff\xf7\xdd\x91\x92\x4d\xd9\xe9\xd6\x4d\x05\x1a\x89\x77\xf7\xb9\xef\xc7\xf3\xb4\xb0\x55\x39\x3f\x99\x16\x20\xf2\xf9\x49\x34\x35\x99\x96\x2b\xcb\x8c\xce\x66\x71\x61\xed\x6a\x92\xa6\x99\xca\x81\xdf\xfd\xde\x80\xde\xf0\x4c\x55\xa9\x7f\x3d\x1b\xf1\xff\xf2\x11\xbf\x33\xf1\x7c\x9a\x7a\xa9\x6f\xc8\x57\xaa\x82\xda\xde\x19\x27\x9c\xab\x75\x5d\x2a\x91\x9b\xf6\xf8\x7b\x00\x9c\x01\x85\x5c\x16\x59\x21\xb4\xf5\x38\xc1\xe7\x3f\x44\xa8\x54\xde\x94\x60\x52\x78\x5c\x29\x6d\x65\xbd\x3c\x02\x2a\x65\x7d\xcf\x34\x94\xb3\xd8\xd8\x0d\xb2\x16\x00\x36\x66\x76\xb3\x82\x59\x6c\xe1\xd1\xa6\x99\x31\x31\x2b\x34\x2c\x66\x71\x6a\xac\xb0\x32\x4b\x2b\x21\x6b\x4e\xe7\x18\xd3\xd4\x07\x75\x7a\xab\xf2\xcd\xfc\x84\xe1\xd3\xd9\x16\x60\xdc\x89\x07\xe1\x4f\x63\xcf\x43\xcf\x83\xd0\xcc\xa8\xec\x9e\xcd\x58\xdd\x94\xe5\x45\x8f\xb0\x36\x8d\x96\x48\x89\xd7\x06\x5d\x1b\x8d\xff\xc3\xcf\xf1\xdf\x68\xf2\x66\x3c\x1e\xa7\x6b\x13\x5f\x9c\x9c\x44\x11\x31\xaa\x95\x95\xaa\x36\xc8\xfa\x84\x27\x91\xf3\x7d\xe2\xdf\x23\xb2\x60\xc2\x06\x66\x85\x4e\xc2\x60\xe8\xce\x32\x55\xd7\x90\xd9\x2b\xd4\x68\x26\xcc\xea\x06\xfc\x39\x3c\x60\xa2\x4c\x27\x19\x51\xfa\x26\x6c\xd1\xd4\x19\xc1\xb3\xe4\xb4\x23\x44\xa1\xd9\xb0\x66\xbf\xc2\xed\x0d\x7e\x81\x4d\x9c\xc9\xa7\x17\x21\x1b\x94\x0b\x64\xb3\x85\x34\xce\x5e\x7a\x48\x94\xab\x5a\xad\xa0\x46\x52\xa7\x80\xf0\x19\x9a\x66\x54\x09\xbc\x54\xcb\x24\x6e\xed\x84\x9c\x59\xc5\x62\xf6\x92\xb5\xf0\x6c\xdb\x07\xca\x4a\x65\x20\x44\x82\x6f\x41\x91\x1f\x8e\x3b\x67\x09\x01\x02\xa7\x8a\xc1\x97\xf8\x34\x3e\xc6\xad\xc0\x18\xb1\x3c\x42\x6e\x99\xa2\xca\x2c\x91\xf4\xd3\xcd\xa7\x2b\xbe\x12\xda\x40\x02\x3c\x17\x56\x9c\xee\xfc\x8c\xe4\x82\x25\xc8\xc5\x29\x09\x6c\x36\x9b\x61\x1e\xb0\x7a\x1a\x33\x08\x50\xa2\x5c\x65\x8d\xeb\x90\x25\xd8\xff\x97\x40\xaf\x6f\x37\x1f\xf2\x64\xc7\xcb\x25\xda\xae\x2f\x3f\x7f\xfc\x19\xd5\x11\x9c\x27\x5c\xec\x11\x84\x25\x23\x7d\xa3\x39\x85\x58\xf7\x95\xb4\x64\x0e\x9c\xf2\x85\xd2\x95\xb0\xc9\xe0\x37\x7c\xce\x3e\x7e\x3c\x7b\xff\x9e\x5d\x5e\x4e\xaa\x6a\x62\x10\xfc\xe2\xaf\xed\xf0\x60\x07\x76\x38\x9d\x2f\xd9\x80\x25\x03\xfc\x13\xe8\x34\xcd\xed\x1d\x46\x9a\x68\xa7\x44\x1a\x4c\x6f\x35\x4b\xe7\xee\xf5\x52\x98\x02\x8b\xb1\x2f\x50\xe0\xe1\xce\x8a\x2d\x83\x12\x73\x79\x1c\x38\x0d\xa6\x29\x6d\x2f\x70\xfe\xa8\x8d\x89\xff\xd8\x7b\xf3\x82\x83\xc8\x8a\xc4\x1f\x73\x03\x76\xb8\x4f\xe2\x3d\x6c\x86\xd8\x61\x65\x13\x66\xd3\x97\xeb\x2d\xd4\x59\x81\x90\x8e\xfa\xe5\xfc\xeb\x1e\xf0\x20\xca\x2d\xf0\xdf\x09\xf4\x1e\x4a\x5a\xa8\xba\x6e\x6d\x9f\x5a\x54\xd8\xa7\x84\x33\x0c\x4e\x37\x13\x6f\x11\xbf\x32\xd7\xa0\x3f\xad\x02\xda\x36\x04\xf4\x9d\xa6\x25\xd0\x10\xa0\x96\xa3\x24\x26\xad\x28\x22\x07\x69\x8e\x7a\x7d\x71\xe3\x84\xe2\x61\x2b\x1d\xf2\x51\x0e\xda\x53\xec\xa6\x34\xed\x14\x88\x52\xe3\xb8\xdb\x30\x78\x94\xc6\x9a\xc0\x58\x4f\xe7\x22\xcf\xaf\x95\xc4\x10\x91\x97\x43\x3f\x5e\x5a\x59\xd7\x1f\xbc\x84\x7a\x69\x0b\x36\x67\xe3\xd7\xa1\xbe\x36\xf5\x4e\x95\x1b\x2b\x5e\xa6\xa7\x00\x1d\x43\x78\x6f\x74\x12\x86\x8f\xb2\x23\x26\xec\x0b\xe9\xfc\x1a\x46\x30\x92\xf9\x2e\x86\x18\x88\x1e\xc9\xc7\xfc\x79\xe2\xb6\x67\xda\x49\x78\xbc\xfb\x40\x43\xaf\xd4\x7a\xc8\x50\xa9\xa6\xe2\x50\x0f\xa0\xd9\x7d\x8d\x37\x5f\x6b\xfb\x90\x89\x3a\x67\xb2\xc6\x2f\xeb\x06\xbc\x09\x65\x31\xc0\xae\xcc\x30\xa4\x1a\x58\x25\x8d\xa1\xcb\xe9\xb0\x82\x9d\xd3\x1d\xdc\xae\x84\x65\x9d\xc3\x63\x1b\xd6\x5e\x11\x2f\x54\x83\x2a\x71\x62\x09\x0c\x66\xe0\xc2\x0e\x0d\x05\x5c\x1a\x42\xb0\xfc\xd1\x39\x51\xf5\x90\x5c\x01\xd0\x29\xa7\x38\x61\x17\xba\xea\xec\xb3\xec\xd4\x51\x96\x2f\x42\x82\x06\xdb\xe8\xfa\xc8\x8c\x20\x94\xfd\x10\x93\xb2\x7f\x39\xb4\xbe\x06\x6f\xf0\xae\xa6\x9e\x8e\xf3\x77\xd8\x33\xd4\x34\x14\xeb\x5e\x36\x7b\x75\x78\x5c\x86\xbd\xb6\x7a\xc6\xbe\xce\xea\xf6\xef\xd6\x63\xfb\x3f\xfe\x7f\x2b\x6d\x89\xc6\x3c\x31\xba\xec\x71\xc6\xbd\xa5\xaa\xaa\x84\xbe\x67\xd7\x5a\x2d\x71\x5a\x98\x01\xf3\x9c\x38\x20\x0f\x99\x33\xec\x28\xba\xe6\xd6\x12\x0d\x5a\x2a\x57\x91\x8d\xec\x04\x1e\xff\x87\x9d\xd6\xdd\xca\x58\x37\x6b\x40\x37\x30\xea\x7e\xf6\x18\xb6\xd0\xaa\x62\x25\x02\x18\x4b\x17\xe5\x42\x6a\x83\xd3\xce\x28\x5c\x69\xb0\x20\x0d\x9c\xf8\x7c\xb8\xf7\x3c\xbc\xef\x33\x94\x59\x2a\xaa\x2c\xec\x9c\xaf\x81\x33\x9b\x50\xe3\xa1\xb1\x9f\x65\x05\x9d\x69\x51\x29\x6e\xa1\xdc\xaf\x0c\x7e\x02\x62\x3b\x3c\xbf\x37\xb4\x45\x41\xcb\x00\x77\xa5\x4f\x97\x42\x6d\x06\x6d\x9c\x7d\x74\xb7\x41\x50\x95\x2a\xad\x5c\x75\xf0\x99\x56\xc6\x14\x02\xfd\x0b\xbd\xc0\x13\xdd\xf9\xb5\x13\xa5\xe9\xd8\xed\x52\x6b\x6c\x16\xb5\xc6\xfb\x9c\x16\x9a\x83\x85\x83\x04\x68\x78\xba\x9d\x09\x69\x2f\x92\xc1\xbf\x71\x40\x5a\xdc\xee\x40\xe3\x95\xb7\xdf\x25\x93\x76\xcb\x3a\xdd\x2f\x69\x9d\x92\xfd\x2e\xe9\xbe\x8a\xd1\xfc\x47\xc5\xf6\x05\xf0\xcb\x07\xdc\x10\x47\xb4\x68\xe6\xf2\x81\xb9\x15\x73\x16\x2f\xd0\x18\x8c\xa6\x46\x7c\x5a\x08\xa3\x68\x5a\x8c\xe7\x4f\x4f\x0c\xab\x92\xf1\x77\x6d\x66\xb7\xdb\x2e\xc9\x88\x30\xf6\x5c\xaf\x88\xcb\x15\x4a\x29\x30\xe1\x1d\xef\x76\x8b\xc7\xfc\x3d\x66\x94\xff\xe0\x92\xc0\xe2\xf1\xf9\xf9\x9b\xb3\xf3\xd1\xd9\xf9\x38\x66\x8e\x4c\x45\x83\x90\x67\xac\x43\x70\x53\x64\xaf\x6e\xc4\xbe\x1f\x05\x0d\x7a\x45\x2e\xa5\xe8\xd3\xf3\xae\x95\xb0\xe8\x79\xc6\xaf\xef\x97\x34\x65\xbd\xf0\xce\x9b\x6b\x61\x71\x27\x68\xe9\xf4\xf1\xe7\xe0\x54\x84\x67\xa2\x94\xcb\x7a\xc2\x32\xbc\x88\x41\xef\x74\xdc\xb8\xb5\x68\x82\xcb\xf7\x4a\xd4\x4c\xe6\xb4\xce\xd3\x49\x4c\x14\xbf\xf9\x73\x8e\xb9\x42\xea\x7c\x6f\xc1\xeb\xf9\xbb\x46\x6b\x44\x6a\x43\x1d\xca\xfb\x13\xf7\x63\xa1\x15\x7a\x7d\x68\x96\x67\x6b\x0b\x86\x38\x1d\x0d\x7f\x13\xf8\x1f\x03\x28\xe2\x7e\x77\xfd\x11\x00\x00\xff\xff\xbe\x79\xec\x87\x7f\x0d\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 3455, mode: os.FileMode(420), modTime: time.Unix(1445108388, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _assetsMainCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\xd1\xb1\x4e\xc3\x30\x10\x06\xe0\x99\x3c\xc5\xa9\x0c\x59\x6c\xc9\x76\x5b\x09\xb9\x13\x1b\x13\x0c\x3c\x81\x09\x97\xe4\x24\xd7\xae\x6c\x03\x2d\x88\x77\xc7\x4d\x68\x25\xcb\x1d\x18\x8a\x32\x44\xfa\x7d\x77\xfa\x74\xf7\xe2\x5f\x0f\xf0\xd5\xdc\xf4\xde\x25\xde\x9b\x2d\xd9\x83\x86\xc5\x03\xda\x77\x4c\xd4\x19\x78\xc4\x37\x5c\x30\x38\x07\x0c\xee\x03\x19\xcb\x20\x1a\x17\x79\xc4\x40\xfd\xa6\xf9\x6e\x9a\x51\x56\x53\xda\x72\x4a\xcb\xa0\x7d\xda\xa1\x83\xe7\xdc\xd9\x96\x03\xe6\xc6\x48\x9f\xa8\x61\x2d\x76\xfb\x53\xf2\x81\x34\x8c\x49\xc3\x52\x88\x1c\x59\x72\xc8\xc7\x53\xa4\xa6\xb2\xad\x09\x03\x39\x0d\x2a\x77\x81\x98\x7e\x39\x4d\xb8\x4f\xdc\x58\x1a\xf2\x4b\x87\x2e\x61\x98\x91\xea\x88\xec\xbc\xf5\x41\xc3\xad\x94\x72\x73\x1d\xb2\xba\xab\xc9\xaa\x26\xab\x92\x2c\xf2\x27\x27\xef\x91\xb6\xfc\x27\xda\x85\x6d\xca\x0b\x34\x51\xd1\xd4\x99\xb6\xbe\xd6\x69\xe5\xea\x4f\xa7\xfd\x2d\x2b\xf6\xb4\x9a\x31\x3f\x01\x00\x00\xff\xff\x60\xf7\x80\x34\xaf\x02\x00\x00")

func assetsMainCssBytes() ([]byte, error) {
	return bindataRead(
		_assetsMainCss,
		"assets/main.css",
	)
}

func assetsMainCss() (*asset, error) {
	bytes, err := assetsMainCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/main.css", size: 687, mode: os.FileMode(420), modTime: time.Unix(1445108440, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/index.html": assetsIndexHtml,
	"assets/main.css": assetsMainCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{assetsIndexHtml, map[string]*bintree{
		}},
		"main.css": &bintree{assetsMainCss, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, Prefix: k}
	}
	panic("unreachable")
}
