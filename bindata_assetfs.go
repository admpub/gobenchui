// Code generated by go-bindata.
// sources:
// assets/index.html
// assets/main.css
// assets/websocket.js
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x56\x6d\x6f\xe2\x46\x10\xfe\x0c\xbf\x62\xe4\x56\x02\xd4\x60\x03\xd7\x5c\x55\x07\x90\x9a\xab\xfa\xf2\xa1\xa7\x93\xd2\x7e\xaa\xaa\x68\xb1\x07\xbc\xc4\xde\x75\x77\xd7\xbc\x28\xe5\xbf\x77\x76\xd7\x26\xf6\xd1\x34\xd1\xa9\xea\x11\x29\xd8\x3b\x2f\xcf\xcc\x3c\x33\xb3\xcc\x33\x53\xe4\xcb\xfe\x3c\x43\x96\x2e\xfb\xbd\xb9\x4e\x14\x2f\x0d\x68\x95\x2c\x82\xcc\x98\x32\x8e\xa2\x44\xa6\x18\x6e\xff\xac\x50\x1d\xc3\x44\x16\x91\x7f\x1c\x4f\xc3\x6f\xc3\x69\xb8\xd5\xc1\x72\x1e\x79\xab\x67\xec\x0b\x59\xa0\x30\x5b\xed\x8c\x53\xb9\x17\xb9\x64\xa9\xae\x8f\x5f\xe3\xc0\x05\x90\xf1\x4d\x96\x64\x4c\x19\xef\xa7\xf5\xfa\x89\x1e\x0a\x99\x56\x39\xea\x08\x0f\xa5\x54\x86\x8b\xcd\x85\xa3\x9c\x8b\x07\x50\x98\x2f\x02\x6d\x8e\xa4\x9a\x21\x9a\x00\xcc\xb1\xc4\x45\x60\xf0\x60\xa2\x44\xeb\x00\x32\x85\xeb\x45\x10\x69\xc3\x0c\x4f\xa2\x82\x71\x11\xda\x73\xaa\x69\xe4\x8b\x3a\x5f\xc9\xf4\xb8\xec\x03\x7d\x9a\xd8\x5a\x3e\xb6\x6c\xc7\xfc\x69\xe0\x75\xec\x67\xc7\x14\x68\x99\x3c\xc0\x02\x44\x95\xe7\x37\x1d\xc1\x5e\x57\x8a\x93\x24\xd8\x6b\x4a\x6d\x3a\xfb\x26\x9c\xd0\xdf\x34\x7e\x3b\x9b\xcd\xa2\xbd\x0e\x6e\xfa\xfd\x5e\xcf\x2a\xca\xd2\x70\x29\xf4\xbd\xe1\x05\x92\xfe\x23\x1d\xf7\x5c\x01\x62\x78\x74\x21\xc4\x30\xd0\x25\x65\x89\x83\x2b\x48\xa4\x10\x98\x98\xf7\x04\xa7\x63\x30\xaa\xc2\x2b\x38\x5d\x59\x13\xc3\x4d\x8e\xce\x84\xe2\x8d\x21\x78\x7c\x84\xf0\xc3\xc3\xe6\x3d\x23\xaf\xa7\x53\x50\x6b\xe9\x6a\xf5\xb1\xa2\xc3\x5d\xa1\x48\xb2\x82\xa9\x07\x18\x0a\x1d\xc9\x72\xd4\x18\x1c\xbe\x3b\x70\x6d\xb5\x15\xee\x50\x69\x4c\x1b\xd4\x84\x19\xdc\x48\xc5\x91\xa4\xbf\xff\xd1\x44\x71\xac\xd5\xed\x73\x2f\x67\x2b\xcc\xcf\x6f\x17\x11\xfe\x4a\xc0\x0d\x4c\xaf\xb7\x96\xaa\x60\xc6\xa0\x8a\x61\x5d\x89\xc4\xd6\x04\x86\x23\x07\x6c\x2a\x25\xc0\x64\x5c\x87\x3b\x96\x57\x08\x5f\xc1\x40\xe8\xc1\x0d\x9c\x9c\xa5\xfb\x5f\xd7\x40\xca\xdc\xf0\xd2\x62\x24\x4a\x6a\x9d\x31\xae\xce\x65\xa2\x37\xd5\x84\x5f\xa3\x52\x8d\xf8\x1a\x42\x1b\xc8\x1d\xda\x54\xa8\x52\x60\x0b\xd7\x3a\xf9\x0b\xb6\x5a\x8a\x7b\x6d\x88\xfc\x12\xd3\x5a\x03\x85\x7d\x22\x1f\xa7\x0b\x1e\x0b\x2c\x3e\x07\x8d\x04\x2b\xd5\xb1\x4d\xe4\xed\xff\xc4\xe3\x2f\x0e\xf9\x53\x99\xbc\xfd\x0f\x89\xa4\x48\xba\x3c\x3e\x1d\xbc\x8a\xc6\x3d\x17\xb4\xf9\x42\xe9\x76\x1f\x91\xd8\x84\x6f\xa3\xb7\x30\x5f\x0e\x07\x5f\xd8\x71\xb9\x3f\x57\x79\x30\x6a\x2d\xac\x61\x7b\x94\x47\x37\x8d\x05\x31\xf3\x92\x01\xa9\x78\x7d\xdb\x48\x4e\xd6\xac\x83\x97\x20\x3f\x36\xf3\xdd\xf7\x02\xac\x33\xa2\x94\x7b\xcf\x2d\xe4\x66\x4f\xee\x71\x65\x17\x1c\x5e\x5e\x00\xd9\x74\xf9\xa3\x84\xdb\x73\xb7\xfd\xf6\x33\x2d\xd2\xa9\x95\xa4\x7c\x07\x6e\x13\x2f\x82\x35\xd5\x91\x3a\x44\x11\xb2\xdd\x9b\x3d\x32\x9b\x2d\xa9\xec\x39\x0a\x08\xdf\xc9\xa2\xe0\xc6\x51\x95\xf8\x47\xf2\x30\xf3\x5a\x6f\xac\xd6\x9e\x9b\x0c\x72\xa6\xcd\x59\xf7\x74\xb2\xa4\x7e\x4f\x1d\x1b\xfe\xe0\x9a\x0c\x82\xd9\x64\xf2\x76\x3c\x99\x8e\x27\x33\x6a\xc0\xd3\x99\x52\x18\x43\xe3\x81\x38\xc5\xc3\x13\xdc\x14\x5e\xef\x85\x02\x7a\x63\x53\x8a\x28\xa7\x7f\x4e\x2d\xc7\x75\x27\xb3\xd6\xac\xb6\xb3\xf9\xc0\x4c\x16\x43\x2d\xb7\x2f\xff\xee\xdc\x0e\xd6\x98\xe5\x7c\x23\x62\x48\xe8\xfa\x45\x75\xc6\xb8\x23\x62\x2a\x1a\x85\xb9\x2e\x99\x00\x9e\xda\x5b\xcf\x9e\x04\x0e\xdd\x4b\x9d\x73\x2b\x5f\x36\x31\xd4\xf3\xf1\xae\x52\x8a\xdc\xf9\x52\xf8\xc6\x9f\x67\xd7\xce\x8b\xa7\xe0\x7e\x95\x13\xdd\xc1\xb2\x56\xac\x89\x69\xa3\xf9\x13\x8f\xd6\x71\xf7\x5c\x41\x61\x7a\x1d\x4f\xbe\x8e\x27\xd7\xb6\xb2\x30\xbc\xb4\xbb\xab\x56\x5b\xda\x85\x24\x1d\xcd\x57\x0a\xa2\xe5\x4f\x4c\xd7\xc5\xea\x2a\xda\xf3\x4e\x6a\xd7\x75\x6a\xcd\x14\x77\x4a\x99\x50\xe7\x68\x1b\xaf\x30\x74\xd9\x37\x15\x6c\x49\x32\x96\xaf\x03\x97\x53\x77\xbe\x6c\x9f\x7b\x3f\xcf\xa8\x77\x06\xeb\x49\xbb\xfe\x9e\x47\xfe\x87\x04\xc5\xe7\x7e\xb3\xfd\x1d\x00\x00\xff\xff\x22\x8a\xd8\xf4\xbb\x09\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 2491, mode: os.FileMode(420), modTime: time.Unix(1445219222, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _assetsMainCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x92\x31\x6f\x83\x30\x10\x85\xe7\xf2\x2b\x4e\xa9\x22\x16\xa8\x6c\x27\x91\x5a\x98\xba\x75\x6a\x87\xfe\x02\x07\x0e\xb0\xe4\xd8\x91\x71\x1b\x68\xd5\xff\xde\xc3\x24\x48\x88\x0c\x1d\x52\x31\x20\xbd\x7b\xef\xe9\xe3\x8e\xbd\x2d\x7b\xf8\x8e\xee\x2a\x6b\x7c\x5a\xc9\x83\xd2\x7d\x06\xab\x17\xd4\x9f\xe8\x55\x21\xe1\x15\x3f\x70\x95\xc0\x24\x24\xf0\xec\x94\xd4\x09\xb4\xd2\xb4\x69\x8b\x4e\x55\x79\xf4\x13\x45\x0d\x5f\xb4\xc4\xf3\x96\x38\x81\xf8\xed\x88\x06\xde\x29\x19\xcf\x0b\xc6\x60\xab\xbe\x30\x83\x1d\x3b\x76\x17\xe5\x84\xaa\x6e\x7c\x06\x1b\xc6\x48\xd2\xca\x60\xda\x5c\x24\x11\x6c\x07\xe9\x6a\x65\x32\x10\x94\x02\x16\x5e\xa4\x7a\xec\x7c\x2a\xb5\xaa\x69\x52\xa0\xf1\xe8\x46\x48\x31\x40\x16\x56\x5b\x97\xc1\x3d\xe7\x3c\xbf\x0d\xb2\x78\x5c\x22\x8b\x25\xb2\x98\x23\x33\x7a\x78\xe0\x1d\xd0\x36\xff\x84\x76\x65\x9b\xfc\x0a\x1a\x5b\xa0\x89\x09\x6d\x77\xab\xd3\xf2\xed\x9f\x4e\x7b\xb6\xcd\xf6\xb4\x3d\xc3\x3c\x14\x14\x96\xe4\x76\x03\xd4\x49\x95\xbe\x09\x1f\xb4\x1e\xa7\x8d\xd4\x55\xa0\xd5\x56\x52\x93\xc6\xca\xe7\x93\x6d\xfb\xb4\x0e\xb5\x5d\x3a\x13\xf6\xd6\x95\x48\x5b\xe7\xf4\x07\xe9\x81\xa0\x76\xd8\x43\x6b\xb5\x2a\x87\xd2\xdf\x00\x00\x00\xff\xff\x91\x99\x06\x8a\x22\x03\x00\x00")

func assetsMainCssBytes() ([]byte, error) {
	return bindataRead(
		_assetsMainCss,
		"assets/main.css",
	)
}

func assetsMainCss() (*asset, error) {
	bytes, err := assetsMainCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/main.css", size: 802, mode: os.FileMode(420), modTime: time.Unix(1445216799, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _assetsWebsocketJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x55\x51\x6b\x1c\x37\x10\x7e\xde\xfb\x15\xd3\x6b\xe0\xf6\xc8\x45\xee\xf3\xb9\x2e\x34\xb8\xc5\x2d\xb5\x1d\x70\xa0\x94\x10\x8c\x6e\x35\xbe\x55\xbd\x92\x8c\xa4\x3d\x7b\x29\xf7\xdf\x3b\x23\x69\x2f\x1b\x1f\x09\x29\xa5\xd0\x87\xf8\xe1\x2c\xcd\x68\xbe\x99\xf9\xe6\x93\x76\x27\x3d\x04\xd7\xdc\xc3\x19\x58\x7c\x84\xdf\x71\x73\x43\x3b\x8c\xf5\x63\xe8\xbd\x5e\x9e\xce\x66\xec\x15\xce\xba\x07\xb4\x74\xe8\xae\xb7\x4d\xd4\xce\xd6\x4b\xf8\x0b\x1a\x67\x83\xeb\x50\x74\x6e\x5b\xcf\x69\x63\xb1\x89\xa8\x20\x3a\x98\xc3\x4b\x28\x08\xb0\x1f\x21\x9a\xce\x05\x9c\x62\xe0\xa7\x40\xc8\x09\xe9\xb4\x82\x9a\xa1\x50\x34\x4e\x21\x2d\xe6\xcb\xf9\x14\xd1\x60\x08\x72\x7b\x84\x39\xab\xb8\xad\xa6\x95\x3e\xde\x46\x6d\xd8\xff\xa2\x5e\x7c\xcb\xcb\xdb\x0d\xda\xa6\x35\xd2\xdf\x2f\x96\xa2\xd5\xdb\x36\x9d\x0a\x35\x75\x3a\x09\x32\x68\x4a\x0c\xad\x3e\x17\x32\xab\x4c\xd8\xd2\xd1\x5f\x6f\xae\xaf\xc4\x83\xf4\x01\x6b\x14\x4a\x46\xc9\xcc\x55\xfa\x0e\x6a\xf2\x8b\x38\x3c\x50\x0d\x67\x67\xb0\x08\x51\xc6\x3e\x2c\x52\x8d\x95\x72\x4d\x6f\xd0\x46\xb1\xc5\xf8\x53\x87\xbc\x7c\x3d\xfc\xa2\xea\xc3\x29\xa1\x89\x0d\x7f\xf1\xf6\xf2\x37\x4a\xc1\x40\xd9\x41\x79\x0f\xd0\xd9\x92\xc0\xe7\x3f\x6b\xab\x43\x8b\x6a\x9e\xe1\x3f\x8d\xdf\x38\x63\x74\xbc\xdd\x74\xc4\x22\x65\x09\x71\x20\xfe\x77\x3a\xe8\x8d\xee\x74\x1c\x28\xd9\xbc\xd5\x4a\xa1\x9d\x73\xaa\x3d\x60\x47\x73\xcb\x90\x32\x32\x9b\xc6\x31\x58\x2a\x20\x63\x71\xcf\xb8\x14\x77\xce\x1b\x19\xeb\xc5\x1f\xf4\xf7\xea\xf2\xf2\xd5\xf9\x39\x5c\x5c\xac\x8d\x59\x07\xea\xe6\xf4\x0b\x6a\x7a\xd6\x73\x4a\xf7\x12\x16\x50\x2f\xe8\xdf\x24\x5d\xe8\x37\x7f\x92\x4e\xd8\xb7\x64\xd7\xe2\xfb\x8d\x87\x93\x1f\xd2\xf2\x42\x86\x76\x0d\xcf\x02\x5a\x32\xa6\x66\xe8\xa7\x34\x74\x3c\x1d\x8f\xa1\xef\x62\x99\x4e\xde\x14\xe2\xf3\x86\x67\x5a\xbd\x10\x28\x9b\xb6\xce\x16\x11\x30\xae\x3e\x88\xef\x1e\x87\x15\xec\x64\xd7\x63\x19\x01\x4b\x2a\xc9\x87\x70\x92\xfd\xdd\x77\xef\x4f\x8f\x89\x2c\x60\xff\x84\x4b\x06\x39\x39\x81\x24\xef\x24\x48\x26\x4b\xb2\x35\x25\xae\x74\x4c\x1a\xce\x9b\xca\x4a\x83\xeb\x44\xe7\x2a\x1b\x86\x75\xae\x4b\x5c\x85\x37\xe8\xaf\x1f\xb2\x79\x9f\x71\xab\x80\x5e\x23\xa9\x6a\x72\x87\x78\x60\x75\x09\x21\xb0\x3c\xcd\x24\xc3\x7c\x98\xaf\x32\xd5\x53\x22\x65\xe7\x51\xaa\x01\xf0\x49\x87\x18\x72\xca\xec\x12\x52\xa9\x37\x4e\x53\xd3\x5c\xe1\x0a\xa2\xef\x91\x18\x94\x34\x91\x82\x39\xea\x8d\xe1\xd2\xa3\x94\x03\x33\xc8\xa4\x20\x02\xba\x49\x9e\xba\x34\xc9\xa4\xca\x35\xbc\x63\xe0\xf7\xa5\xcf\x4a\xab\x43\xa7\x54\xf6\x68\xcd\x7c\x1c\xd9\xf7\x63\x09\xb3\xf4\x53\x38\xa6\x37\xc0\xf9\xe1\x5f\xb1\xfc\x63\x47\x77\x0d\xd5\xeb\x21\xe2\x17\xf0\x4d\x09\xff\x57\x74\x73\x3d\xff\x3d\xdb\xd9\x30\x4b\x94\x5f\xb9\xc7\x15\x10\xb2\xe7\x6b\xe2\x76\xe8\xe1\xde\xba\x47\x5b\x6a\x5b\x81\xb4\x0a\xb4\xa5\x5d\x04\xdb\x77\x5d\xc8\x51\x44\x4f\xba\x64\x44\x88\x47\x30\x3a\x04\x6d\xb7\xe2\xc3\x9d\x9d\x88\x67\x04\x3a\x5c\x5d\x6d\x15\x3e\xad\x72\x82\x72\x79\xef\x5c\x4f\x69\xce\x32\x5b\xa9\xd4\x82\x93\x0e\xa5\x67\x7e\x0a\xa0\x9e\x52\xc9\xa6\x44\xa7\x61\xf1\x5e\x70\xfb\xf4\xc0\x24\x61\x8c\xce\x03\x38\x0f\x24\xd3\x40\x2f\x4e\xec\xbd\x9d\xa4\x2b\xcc\x64\x9a\x18\xee\x9b\x14\x35\x62\xe4\x32\x0e\x03\xfe\x8c\x08\x99\xa3\xa2\xb8\x8f\x25\x30\xcb\x22\x9c\x52\xff\xb6\x45\x08\x5c\x31\x3d\x40\x1f\x49\xbf\xb8\xaf\xcf\xaf\xd7\xf4\x6e\xed\x90\xbf\xf3\x01\xe9\xa3\x27\xf9\xa3\x3f\xf2\xf0\x9c\x6d\xd6\xce\x57\xb2\x8f\xc9\xa6\x74\xfb\xd9\xdf\x01\x00\x00\xff\xff\x3d\xa6\xc4\xfa\x7e\x09\x00\x00")

func assetsWebsocketJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsWebsocketJs,
		"assets/websocket.js",
	)
}

func assetsWebsocketJs() (*asset, error) {
	bytes, err := assetsWebsocketJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/websocket.js", size: 2430, mode: os.FileMode(420), modTime: time.Unix(1445217722, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/index.html": assetsIndexHtml,
	"assets/main.css": assetsMainCss,
	"assets/websocket.js": assetsWebsocketJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{assetsIndexHtml, map[string]*bintree{
		}},
		"main.css": &bintree{assetsMainCss, map[string]*bintree{
		}},
		"websocket.js": &bintree{assetsWebsocketJs, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, Prefix: k}
	}
	panic("unreachable")
}
